{"version":3,"file":"main.js","mappings":"mBAAe,SAASA,GAAK,KAACC,EAAK,GAAE,OAACC,EAAO,GAAG,CAAC,GAC7C,IAAIC,EAAU,EAEd,MAAO,CACHC,QAAO,IACIH,EAEXI,MACOF,EAAQD,IACPC,GAAW,EAGnB,EACAG,OAAM,IACKH,IAAYD,EAEvBK,QACIJ,EAAU,CACd,EAER,CC8EA,SAASK,EAA+BC,EAAuBC,EAAYC,GACvEA,EAAeC,SAAQC,IAEnB,IAAI,IAAIC,EAAQJ,GAAcK,EAAEC,GAAIH,EAAME,GAAK,GAAKD,EAAQ,EAAGA,IAASC,IACpEN,EAAuBM,EAAIN,EAAuBM,EAAEE,QAAOC,KAAQA,EAAK,KAAKH,GAAKG,EAAK,KAAKF,KAIhG,IAAI,IAAIF,EAAQJ,GAAcK,EAAEC,GAAIH,EAAMG,GAAK,GAAKF,EAAQ,EAAGA,IAASE,IACpEP,EAAuBO,EAAIP,EAAuBO,EAAEC,QAAOC,KAAQA,EAAK,KAAKH,GAAKG,EAAK,KAAKF,IAChG,GAER,CC5GO,SAASG,EAAYC,EAAMC,EAAKC,GACnC,MAAMC,EAAgC,WAATF,EAAmB,qBAAqB,sBAC/DG,EAAOC,SAASC,cAAc,GAAGH,cAAiCH,EAAM,gBAAgBA,EAAM,QAAQO,cAE5G,GADAH,EAAKI,UAAUC,OAAO,2BACnBP,EAAOQ,WAAW,QAAQ,CACzBN,EAAKI,UAAUG,IAAI,yBAAyB,yBAC5C,MAAMC,EAAYV,EAAOW,MAAM,KAAK,GAEbR,SAASC,cAAc,GAAGH,wCAA2DS,OAC7FJ,UAAUG,IAAI,eACjC,KAEiB,QAATT,EACJE,EAAKI,UAAUG,IAAI,yBACH,SAAXT,GACLE,EAAKI,UAAUG,IAAI,yBAC3B,CAlBoBN,SAASS,iBAAiB,gDCKvC,MAAMC,EAAa,CACtB,QAAU,EACV,WAAa,EACb,UAAY,EACZ,UAAY,EACZ,OAAS,GAGE,SAASC,EAAUC,EAAUC,GAExC,MAAMC,EAAkB,CAAC,EACzB,IAAIC,EAAgB,CAChB,QAAU,GACV,WAAa,GACb,UAAY,GACZ,UAAY,GACZ,OAAS,IAGbC,OAAOC,KAAKP,GAAYvB,SAAQ+B,IAC5BJ,EAAgBI,GAAK,CACjB,QAAU3C,EAAK,CAACC,KAAK0C,EAAIzC,OAAOiC,EAAWQ,KAC3C,OAAS,GACZ,IAIL,IAAIC,EAAe,GACfC,EAAY,GAkNhB,MAAO,CACHC,UAjNJ,SAAmBzB,EAAK0B,EAAKC,EAAcT,EAAgBlB,GAAM4B,OAAO,GAAGC,GAKvE,OAGJ,SAAiC7B,EAAKnB,EAAO6C,EAAKC,EAAcE,GAG5D,IAAIC,EAAc,GACdC,EAAmB,GAEvB,MAAMC,EAA8Bb,EAAcnB,GAGlD,GAFAmB,EAAcnB,GAAQ,GAEV,MAAT0B,EACC,IAAI,IAAIO,EAAE,EAAEA,EAAEpD,EAAOoD,GAAG,EAEpBH,EAAYI,KAAK,CAACP,EAAc,GAAGA,EAAc,GAAGM,IAG5C,IAALA,GAAUN,EAAc,GAAG,GAAG,GAE7BI,EAAiBG,KAAK,CAACP,EAAc,GAAGA,EAAc,GAAG,IAExDA,EAAc,GAAG,GAAG,GAAKI,EAAiBG,KAAK,CAACP,EAAc,GAAG,EAAEA,EAAc,GAAG,IAEpFA,EAAc,GAAG,GAAG,GAAKI,EAAiBG,KAAK,CAACP,EAAc,GAAG,EAAEA,EAAc,GAAG,KAEhFM,IAAIpD,EAAO,GAAM8C,EAAc,GAAGM,EAAE,GAAG,IAE5CF,EAAiBG,KAAK,CAACP,EAAc,GAAGA,EAAc,GAAGM,EAAE,IAE1DN,EAAc,GAAG,GAAG,GAAKI,EAAiBG,KAAK,CAACP,EAAc,GAAG,EAAEA,EAAc,GAAGM,EAAE,IAEtFN,EAAc,GAAG,GAAG,GAAKI,EAAiBG,KAAK,CAACP,EAAc,GAAG,EAAEA,EAAc,GAAGM,EAAE,KAI1FN,EAAc,GAAG,GAAG,GAAKI,EAAiBG,KAAK,CAACP,EAAc,GAAG,EAAEA,EAAc,GAAGM,IACpFN,EAAc,GAAG,GAAG,GAAKI,EAAiBG,KAAK,CAACP,EAAc,GAAG,EAAEA,EAAc,GAAGM,SAEvF,GAAY,MAATP,EACL,IAAI,IAAIO,EAAE,EAAEA,EAAEpD,EAAOoD,GAAG,EAEpBH,EAAYI,KAAK,CAACP,EAAc,GAAGM,EAAEN,EAAc,KAG1C,IAALM,GAAUN,EAAc,GAAG,GAAG,GAE9BI,EAAiBG,KAAK,CAACP,EAAc,GAAG,EAAEA,EAAc,KAEvDA,EAAc,GAAG,GAAG,GAAKI,EAAiBG,KAAK,CAACP,EAAc,GAAG,EAAEA,EAAc,GAAG,IAEpFA,EAAc,GAAG,GAAG,GAAKI,EAAiBG,KAAK,CAACP,EAAc,GAAG,EAAEA,EAAc,GAAG,KAEhFM,IAAIpD,EAAO,GAAM8C,EAAc,GAAGM,EAAE,GAAG,IAE5CF,EAAiBG,KAAK,CAACP,EAAc,GAAGM,EAAE,EAAEN,EAAc,KAEzDA,EAAc,GAAG,GAAG,GAAKI,EAAiBG,KAAK,CAACP,EAAc,GAAGM,EAAE,EAAEN,EAAc,GAAG,IAEtFA,EAAc,GAAG,GAAG,GAAKI,EAAiBG,KAAK,CAACP,EAAc,GAAGM,EAAE,EAAEN,EAAc,GAAG,KAI1FA,EAAc,GAAG,GAAG,GAAKI,EAAiBG,KAAK,CAACP,EAAc,GAAGM,EAAEN,EAAc,GAAG,IACpFA,EAAc,GAAG,GAAG,GAAKI,EAAiBG,KAAK,CAACP,EAAc,GAAGM,EAAEN,EAAc,GAAG,IAS7F,OAUJ,SAAsBG,GAElB,MAAMxC,EAAiB8B,OAAOe,OAAOhB,GAAeiB,QAAO,CAACC,EAAKC,IAAMD,EAAKE,OAAOD,IAAK,IAExF,OAAOR,EAAYU,OAAMhD,IAEbF,EAAemD,MAAKC,GAEhBA,EAAQ,KAAKlD,EAAK,IAAKkD,EAAQ,KAAKlD,EAAK,MAErDA,EAAK,IAAI,GAAKA,EAAK,GAAIwB,GACvBxB,EAAK,IAAI,GAAKA,EAAK,GAAIwB,GAE/B,CA3BmC2B,CAARd,EAAqBC,EAAYc,MAAM,GAAkBd,IAK5EZ,EAAgBlB,GAAM4B,OAASE,EAC/BX,EAAcnB,GAAQmB,EAAcnB,GAAMuC,OAAOT,EAAYC,IACtD,IAGXZ,EAAcnB,GAAQgC,GACf,EACX,CAnFoBa,CAAwB7C,EAAKc,EAAWd,GAAM0B,EAAKC,EAAcE,EAGrF,EA4MIiB,cA3GJ,SAAuB/C,GAEnB,IAAIgD,EAAa,OACjB,MAAMC,EAAqB,IAAIC,IAE/B,GAAGzB,EAAUiB,MAAKS,GAASA,EAAM,KAAKnD,EAAM,IAAKmD,EAAM,KAAKnD,EAAM,MAC9DwB,EAAakB,MAAKS,GAASA,EAAM,KAAKnD,EAAM,IAAKmD,EAAM,KAAKnD,EAAM,KAClE,MAAO,gBAEX,IAAI,MAAMoD,KAAS/B,OAAOe,OAAOjB,GAE7B,GAAGiC,EAAMvB,OAAOa,MAAKjD,GACVA,EAAK,KAAKO,EAAM,IAAKP,EAAK,KAAKO,EAAM,KAC7C,CACCoD,EAAMC,QAAQpE,MACd+D,EAAW,MAEXvB,EAAUU,KAAKnC,GAEZA,EAAM,GAAG,GAAK,IACZA,EAAM,GAAG,GAAK,IAAOwB,EAAakB,MAAKS,GAASA,EAAM,KAAKnD,EAAM,GAAG,GAAImD,EAAM,KAAKnD,EAAM,GAAG,KAAOiD,EAAmBtC,IAAI,CAACX,EAAM,GAAG,EAAEA,EAAM,GAAG,IAC/IA,EAAM,GAAG,EAAIiB,IAAeO,EAAakB,MAAKS,GAASA,EAAM,KAAKnD,EAAM,GAAG,GAAImD,EAAM,KAAKnD,EAAM,GAAG,KAAQiD,EAAmBtC,IAAI,CAACX,EAAM,GAAG,EAAEA,EAAM,GAAG,KAEzJA,EAAM,GAAG,EAAIiB,IACXjB,EAAM,GAAG,GAAK,IAAOwB,EAAakB,MAAKS,GAASA,EAAM,KAAKnD,EAAM,GAAG,GAAImD,EAAM,KAAKnD,EAAM,GAAG,KAAQiD,EAAmBtC,IAAI,CAACX,EAAM,GAAG,EAAEA,EAAM,GAAG,IAChJA,EAAM,GAAG,EAAIiB,IAAeO,EAAakB,MAAKS,GAASA,EAAM,KAAKnD,EAAM,GAAG,GAAImD,EAAM,KAAKnD,EAAM,GAAG,KAAQiD,EAAmBtC,IAAI,CAACX,EAAM,GAAG,EAAEA,EAAM,GAAG,KAGzJoD,EAAMC,QAAQnE,WACb8D,EAAa,QAAQI,EAAMC,QAAQrE,YAGlCoE,EAAMvB,OAAO,GAAG,GAAG,GAAI,IAAOL,EAAakB,MAAKS,GAASA,EAAM,KAAMC,EAAMvB,OAAO,GAAG,GAAG,GAAKsB,EAAM,KAAMC,EAAMvB,OAAO,GAAG,MAASoB,EAAmBtC,IAAI,CAACyC,EAAMvB,OAAO,GAAG,GAAG,EAAEuB,EAAMvB,OAAO,GAAG,KAE/LuB,EAAMvB,OAAO,GAAG,GAAG,GAAI,IAAOL,EAAakB,MAAKS,GAASA,EAAM,KAAMC,EAAMvB,OAAO,GAAG,IAAMsB,EAAM,KAAMC,EAAMvB,OAAO,GAAG,GAAG,KAAQoB,EAAmBtC,IAAI,CAACyC,EAAMvB,OAAO,GAAG,GAAGuB,EAAMvB,OAAO,GAAG,GAAG,IAEhMuB,EAAMvB,OAAOuB,EAAMvB,OAAO/C,OAAO,GAAG,GAAG,EAAGmC,IAAeO,EAAakB,MAAKS,GAASA,EAAM,KAAMC,EAAMvB,OAAOuB,EAAMvB,OAAO/C,OAAO,GAAG,GAAG,GAAKqE,EAAM,KAAMC,EAAMvB,OAAOuB,EAAMvB,OAAO/C,OAAO,GAAG,MAASmE,EAAmBtC,IAAI,CAACyC,EAAMvB,OAAOuB,EAAMvB,OAAO/C,OAAO,GAAG,GAAG,EAAEsE,EAAMvB,OAAOuB,EAAMvB,OAAO/C,OAAO,GAAG,KAE1SsE,EAAMvB,OAAOuB,EAAMvB,OAAO/C,OAAO,GAAG,GAAG,EAAGmC,IAAeO,EAAakB,MAAKS,GAASA,EAAM,KAAMC,EAAMvB,OAAOuB,EAAMvB,OAAO/C,OAAO,GAAG,IAAMqE,EAAM,KAAMC,EAAMvB,OAAOuB,EAAMvB,OAAO/C,OAAO,GAAG,GAAG,KAAQmE,EAAmBtC,IAAI,CAACyC,EAAMvB,OAAOuB,EAAMvB,OAAO/C,OAAO,GAAG,GAAGsE,EAAMvB,OAAOuB,EAAMvB,OAAO/C,OAAO,GAAG,GAAG,IAE5SsE,EAAMvB,OAAOrC,SAAQQ,GAAOD,EAAYC,EAAMkB,EAAW8B,MAE7D,KACJ,CAWJ,OAPAC,EAAmBzD,SAAQQ,IACvBD,EAAYC,EAAMkB,EAAW,QAC7BM,EAAaW,KAAKnC,EAAM,IAGZ,SAAfgD,GAA0BxB,EAAaW,KAAKnC,GAC7CD,EAAYC,EAAMkB,EAAW8B,GACtBA,CACX,EAqDIM,gBAnDJ,WACI,OAAOjC,OAAOe,OAAOjB,GAAiBsB,OAAMc,GAAMA,EAAKF,QAAQnE,UACnE,EAkDIsE,mBAhDJ,SAA4BvD,GAExB,OAAGA,EACQkB,EAAgBlB,GAAM4B,OAEtBV,CACf,EA2CIsC,sBAzCJ,SAA+BxD,GAE3BkB,EAAgBlB,GAAM4B,OAAO,EACjC,EAuCI6B,WArCJ,WACIrC,OAAOe,OAAOjB,GAAiB3B,SAAQ+D,IACnCA,EAAK1B,OAAO,GACZ0B,EAAKF,QAAQlE,OAAO,IAExBkC,OAAOC,KAAKF,GAAe5B,SAAQ+B,IAC/BH,EAAcG,GAAK,EAAE,IAEzBE,EAAY,GACZD,EAAe,EACnB,EA4BImC,gBA1BJ,WACItC,OAAOuC,QF/NA,SAAqBC,GAChC,MAAMC,EAAa,CAAC,EACdC,EAAqB,CAAC,EAmB5B,OAlBA1C,OAAOC,KAAKP,GAAYvB,SAAQ+B,IAC5BuC,EAAWvC,GAAK,GAChBwC,EAAoBxC,GAmB5B,SAAsCsC,EAAWvE,GAC7C,MAAM0E,EAAS,CAAC,EAAI,GAAG,EAAI,IAC3B,IAAI,IAAI9B,EAAE,EAAEA,GAAG2B,EAAWvE,EAAY4C,IAClC,IAAI,IAAI+B,EAAE,EAAEA,EAAEJ,EAAWI,IACrBD,EAAOrE,EAAEwC,KAAK,CAACD,EAAE+B,IAEzB,IAAI,IAAI/B,EAAE,EAAEA,EAAE2B,EAAW3B,IACrB,IAAI,IAAI+B,EAAE,EAAEA,GAAGJ,EAAWvE,EAAY2E,IAClCD,EAAOpE,EAAEuC,KAAK,CAACD,EAAE+B,IAEzB,OAAOD,CACX,CA9BmCE,CAA6BL,EAAW9C,EAAWQ,GAAI,IAItFF,OAAOC,KAAKwC,GAAYtE,SAAQ+D,IAC5B,MAAMY,EAAgBC,KAAKC,SAAW,GAChCC,EAAWH,EAAgB,IAAI,IAC/BI,EAAQR,EAAoBR,GAAMe,GAAWF,KAAKI,MAAMJ,KAAKC,SAASN,EAAoBR,GAAMe,GAAWxF,SAE3GkF,EAuBd,SAA6B1E,EAAY6E,EAAcM,GACnD,MAAMC,EAAkB,GAClBC,EAAqB,GAC3B,IAAIC,EAAQH,EAAY,GACpBI,EAAQJ,EAAY,GAErBN,EACIS,EAAM,GAAI,IACTD,EAAmBxC,KAAK,CAACyC,EAAM,EAAEC,IAChCA,EAAM,GAAG,GAAKF,EAAmBxC,KAAK,CAACyC,EAAM,EAAEC,EAAM,IACrDA,EAAM,GAAG,GAAKF,EAAmBxC,KAAK,CAACyC,EAAM,EAAEC,EAAM,KAGvDA,EAAM,GAAI,IACTF,EAAmBxC,KAAK,CAACyC,EAAMC,EAAM,IACpCD,EAAM,GAAG,GAAKD,EAAmBxC,KAAK,CAACyC,EAAM,EAAEC,EAAM,IACrDD,EAAM,GAAG,GAAKD,EAAmBxC,KAAK,CAACyC,EAAM,EAAEC,EAAM,KAI9D,IAAI,IAAI3C,EAAE,EAAEA,EAAE5C,EAAY4C,IACtBwC,EAAgBvC,KAAK,CAACyC,EAAMC,IACzBV,GACEU,EAAM,GAAG,GAAKF,EAAmBxC,KAAK,CAACyC,EAAMC,EAAM,IACnDA,EAAM,GAAG,GAAKF,EAAmBxC,KAAK,CAACyC,EAAMC,EAAM,IACpDD,GAAO,IAGNA,EAAM,GAAG,GAAKD,EAAmBxC,KAAK,CAACyC,EAAM,EAAEC,IAC/CD,EAAM,GAAG,GAAKD,EAAmBxC,KAAK,CAACyC,EAAM,EAAEC,IAChDA,GAAO,GAiBf,OAdGV,EACIS,GAAO,IACND,EAAmBxC,KAAK,CAACyC,EAAMC,IAC9BA,EAAM,GAAG,GAAKF,EAAmBxC,KAAK,CAACyC,EAAMC,EAAM,IACnDA,EAAM,GAAG,GAAKF,EAAmBxC,KAAK,CAACyC,EAAMC,EAAM,KAGrDA,GAAQ,IACPF,EAAmBxC,KAAK,CAACyC,EAAMC,IAC9BD,EAAM,GAAG,GAAKD,EAAmBxC,KAAK,CAACyC,EAAM,EAAEC,IAC/CD,EAAM,GAAG,GAAKD,EAAmBxC,KAAK,CAACyC,EAAM,EAAEC,KAIjD,CAACH,EAAgBC,EAC5B,CAvEuBG,CAAoB/D,EAAWwC,GAAMY,EAAcI,GAElET,EAAWP,GAAQS,EAAO,GAuElC,SAAoCD,EAAoBD,EAAWvE,GAE/D,IAAI,MAAMgE,KAAQQ,EACXD,EAAWP,GAAMzE,OAAO,GAE3BM,EAA+B2E,EAAoBR,GAAMxC,EAAWwC,GAAMhE,EAElF,CA7EQwF,CAA2BhB,EAAoBD,EAAWE,EAAO,GAAGxB,OAAOwB,EAAO,IAAI,IAInFF,CACX,CEyMuBkB,CAAY/D,IAAYzB,SAAQ,EAAE+B,EAAI6B,MAEjDjC,EAAgBI,GAAKM,OAASuB,CAAK,GAG3C,EAqBI6B,iBAnBJ,WACO,OAAO5D,OAAOC,KAAKP,GAAY0B,OAAMxC,GAE7BkB,EAAgBlB,GAAM4B,OAAO/C,SAAWiC,EAAWd,IAElE,EAeIiF,gBAbJ,WACI,OAAO1D,CACX,EAcJ,CC7Pe,SAAS2D,EAAOlF,GAC3B,MAAMmF,EAAgB,GAChBC,EAAc,GACdC,EAAkB,GACxB,IAAIC,EAAoB,KACpBC,EAAkB,KAClB7D,EAAO,KACP8D,EAAa,GAuHjB,SAASC,EAA+BC,GACpC,MAAMC,EAAsBR,EAAc5C,OAAO6C,EAAY7C,OAAO8C,IACjEK,EAAW,GAAG,GAAK,IACjBA,EAAW,GAAG,GAAK,IAAOC,EAAoBlD,MAAKS,GAASA,EAAM,KAAKwC,EAAW,GAAG,GAAIxC,EAAM,KAAKwC,EAAW,GAAG,KAAOL,EAAgBnD,KAAK,CAACwD,EAAW,GAAG,EAAEA,EAAW,GAAG,IAC7KA,EAAW,GAAG,GAAI,IAAQC,EAAoBlD,MAAKS,GAASA,EAAM,KAAKwC,EAAW,GAAG,GAAIxC,EAAM,KAAKwC,EAAW,GAAG,KAAQL,EAAgBnD,KAAK,CAACwD,EAAW,GAAG,EAAEA,EAAW,GAAG,KAEhLA,EAAW,GAAG,GAAK,IACjBA,EAAW,GAAG,GAAK,IAAOC,EAAoBlD,MAAKS,GAASA,EAAM,KAAKwC,EAAW,GAAG,GAAKxC,EAAM,KAAKwC,EAAW,GAAG,KAAQL,EAAgBnD,KAAK,CAACwD,EAAW,GAAG,EAAEA,EAAW,GAAG,IAC/KA,EAAW,GAAG,GAAI,IAAOC,EAAoBlD,MAAKS,GAASA,EAAM,KAAKwC,EAAW,GAAG,GAAIxC,EAAM,KAAKwC,EAAW,GAAG,KAAQL,EAAgBnD,KAAK,CAACwD,EAAW,GAAG,EAAEA,EAAW,GAAG,IAGtL,CA6BA,MAAO,CACHE,OA9JJ,SAAgB7F,EAAM,KAAK8F,GAGvB,MAAMF,EAAsBR,EAAc5C,OAAO6C,EAAY7C,OAAO8C,IAEpE,GAAGtF,GAASA,EAAMlB,OAAQ,GAAK8G,EAAoBlD,MAAKjD,GAAQA,EAAK,KAAKO,EAAM,IAAKP,EAAK,KAAKO,EAAM,KACjG,MAAO,gBAEX,IAAI2F,EAAa3F,GAAgB,KAEjC,GAAY,aAATC,EAEC,GAAyB,OAAtBsF,EAICI,EAAaF,EAAWrB,KAAKI,MAAMJ,KAAKC,SAAUoB,EAAiB,SACnEA,EAAaA,EAAW5F,QAAOJ,KAAQA,EAAK,KAAMkG,EAAW,IAAKlG,EAAK,KAAMkG,EAAW,WAKpF,IADJA,EAAa,CAACvB,KAAKI,MAAoB,GAAdJ,KAAKC,UAAaD,KAAKI,MAAoB,GAAdJ,KAAKC,WACjDuB,EAAoBlD,MAAKjD,GAAMA,EAAK,KAAMkG,EAAW,IAAIlG,EAAK,KAAMkG,EAAW,MAC7EA,EAAa,CAACvB,KAAKI,MAAoB,GAAdJ,KAAKC,UAAaD,KAAKI,MAAoB,GAAdJ,KAAKC,WAO/E,MAAML,EAAS8B,EAAM/C,cAAc4C,GAoFnC,MAlFU,aAAP1F,IAEI+D,EAAOtD,WAAW,SACjB0E,EAAcjD,KAAKwD,GACT,OAAThE,IAAmBA,EAAO4D,EAAkB,KAAOI,EAAW,GAAK,IAAM,KAE1ED,EAA+BC,GA4F3C,SAAmC3F,EAAMuE,EAAMwB,EAAIpE,GAG9C,MAAMiE,EAAsBR,EAAc5C,OAAO6C,EAAY7C,OAAO8C,IACxD,MAAT3D,EACG3B,EAAM,GAAGuE,EAAM,IACbvE,EAAM,GAAG,GAAK,IAAM4F,EAAoBlD,MAAKjD,GAAOA,EAAK,KAAMO,EAAM,GAAG,GAAKP,EAAK,KAAMO,EAAM,MAASsF,EAAgBnD,KAAK,CAACnC,EAAM,GAAG,EAAEA,EAAM,KAC9I+F,EAAI,GAAG,GAAK,IAAMH,EAAoBlD,MAAKjD,GAAOA,EAAK,KAAMsG,EAAI,GAAG,GAAKtG,EAAK,KAAMsG,EAAI,MAAQT,EAAgBnD,KAAK,CAAC4D,EAAI,GAAG,EAAEA,EAAI,OAGnIxB,EAAM,GAAG,GAAK,IAAMqB,EAAoBlD,MAAKjD,GAAOA,EAAK,KAAM8E,EAAM,GAAG,GAAK9E,EAAK,KAAM8E,EAAM,MAAQe,EAAgBnD,KAAK,CAACoC,EAAM,GAAG,EAAEA,EAAM,KAC7IvE,EAAM,GAAG,GAAK,IAAM4F,EAAoBlD,MAAKjD,GAAOA,EAAK,KAAMO,EAAM,GAAG,GAAKP,EAAK,KAAMO,EAAM,MAAQsF,EAAgBnD,KAAK,CAACnC,EAAM,GAAG,EAAEA,EAAM,MAI/IA,EAAM,GAAGuE,EAAM,IACbvE,EAAM,GAAG,GAAK,IAAM4F,EAAoBlD,MAAKjD,GAAOA,EAAK,KAAMO,EAAM,IAAMP,EAAK,KAAMO,EAAM,GAAG,KAAOsF,EAAgBnD,KAAK,CAACnC,EAAM,GAAGA,EAAM,GAAG,IAC9I+F,EAAI,GAAG,GAAK,IAAMH,EAAoBlD,MAAKjD,GAAOA,EAAK,KAAMsG,EAAI,IAAMtG,EAAK,KAAMsG,EAAI,GAAG,KAAOT,EAAgBnD,KAAK,CAAC4D,EAAI,GAAGA,EAAI,GAAG,MAGpIxB,EAAM,GAAG,GAAK,IAAMqB,EAAoBlD,MAAKjD,GAAOA,EAAK,KAAM8E,EAAM,IAAM9E,EAAK,KAAM8E,EAAM,GAAG,KAAOe,EAAgBnD,KAAK,CAACoC,EAAM,GAAGA,EAAM,GAAG,IAC9IvE,EAAM,GAAG,GAAK,IAAM4F,EAAoBlD,MAAKjD,GAAOA,EAAK,KAAMO,EAAM,IAAMP,EAAK,KAAMO,EAAM,GAAG,KAAOsF,EAAgBnD,KAAK,CAACnC,EAAM,GAAGA,EAAM,GAAG,IAI3J,CApHYgG,CAA0BL,EAAWJ,EAAkBC,EAAgB7D,GAIvE8D,EAAa,GACbD,EAAkBD,EAAoB,KACtC5D,EAAO,MAEQ,QAATqC,GACNoB,EAAcjD,KAAKwD,GAEnBD,EAA+BC,GAGN,OAAtBJ,GAGa,OAAT5D,IACCA,EAAO4D,EAAkB,KAAOI,EAAW,GAAK,IAAM,IAEtDF,EACYA,EADU,MAAT9D,EACY8D,EAAW5F,QAAOJ,GAAQA,EAAK,KAAKkG,EAAW,KAC/CF,EAAW5F,QAAOJ,GAAQA,EAAK,KAAKkG,EAAW,MAGhE,MAAThE,EAEIgE,EAAW,GAAGJ,EAAkB,IAE/BA,EAAkB,GAAKI,EAAW,GACjCJ,EAAkB,GAAG,GAAI,IAAMK,EAAoBlD,MAAKjD,GAAQA,EAAK,KAAK8F,EAAkB,GAAG,GAAK9F,EAAK,KAAM8F,EAAkB,MAAQE,EAAWtD,KAAK,CAACoD,EAAkB,GAAG,EAAEA,EAAkB,MAIhMI,EAAW,GAAGH,EAAgB,KAElCA,EAAgB,GAAKG,EAAW,GAC/BH,EAAgB,GAAG,GAAI,IAAMI,EAAoBlD,MAAKjD,GAAQA,EAAK,KAAK+F,EAAgB,GAAG,GAAK/F,EAAK,KAAM+F,EAAgB,MAAQC,EAAWtD,KAAK,CAACqD,EAAgB,GAAG,EAAEA,EAAgB,MAGhL,MAAT7D,IAEFgE,EAAW,GAAGJ,EAAkB,IAE/BA,EAAkB,GAAKI,EAAW,GACjCJ,EAAkB,GAAG,GAAK,IAAMK,EAAoBlD,MAAKjD,GAAQA,EAAK,KAAK8F,EAAkB,IAAM9F,EAAK,KAAM8F,EAAkB,GAAG,KAAOE,EAAWtD,KAAK,CAACoD,EAAkB,GAAGA,EAAkB,GAAG,KAIlMI,EAAW,GAAGH,EAAgB,KAElCA,EAAgB,GAAKG,EAAW,GAC/BH,EAAgB,GAAG,GAAK,IAAMI,EAAoBlD,MAAKjD,GAAQA,EAAK,KAAK+F,EAAgB,IAAM/F,EAAK,KAAM+F,EAAgB,GAAG,KAAOC,EAAWtD,KAAK,CAACqD,EAAgB,GAAGA,EAAgB,GAAG,QAMpMD,EAAoB,IAAII,GACxBH,EAAkB,IAAIG,GACrBJ,EAAkB,GAAG,GAAK,IAAMK,EAAoBlD,MAAKjD,GAAQA,EAAK,KAAK8F,EAAkB,GAAG,GAAK9F,EAAK,KAAM8F,EAAkB,MAAQE,EAAWtD,KAAK,CAACoD,EAAkB,GAAG,EAAEA,EAAkB,KACpMA,EAAkB,GAAG,GAAK,IAAMK,EAAoBlD,MAAKjD,GAAQA,EAAK,KAAK8F,EAAkB,GAAG,GAAK9F,EAAK,KAAM8F,EAAkB,MAAQE,EAAWtD,KAAK,CAACoD,EAAkB,GAAG,EAAEA,EAAkB,KACpMA,EAAkB,GAAG,GAAK,IAAMK,EAAoBlD,MAAKjD,GAAQA,EAAK,KAAK8F,EAAkB,IAAM9F,EAAK,KAAM8F,EAAkB,GAAG,KAAOE,EAAWtD,KAAK,CAACoD,EAAkB,GAAGA,EAAkB,GAAG,IACrMA,EAAkB,GAAG,GAAK,IAAMK,EAAoBlD,MAAKjD,GAAQA,EAAK,KAAK8F,EAAkB,IAAM9F,EAAK,KAAM8F,EAAkB,GAAG,KAAOE,EAAWtD,KAAK,CAACoD,EAAkB,GAAGA,EAAkB,GAAG,MAO1MF,EAAYlD,KAAKwD,IAKlB3B,CACX,EA8CJ,CC1KA,MAAMiC,EAAyB5F,SAASC,cAAc,iBAChD4F,EAAsB7F,SAASC,cAAc,wBAC7C6F,EAAU9F,SAASC,cAAc,yBACjC8F,EAAQ/F,SAASS,iBAAiB,sBAClCuF,EAAqBhG,SAASS,iBAAiB,gDAC/CwF,EAAiBjG,SAASC,cAAc,uBACxCiG,EAAoBD,EAAexF,iBAAiB,6BACpD0F,EAAkBnG,SAASC,cAAc,sBACzCmG,EAAgBpG,SAASC,cAAc,8BACvCoG,EAAYrG,SAASC,cAAc,6BACnCqG,EAActG,SAASC,cAAc,6BACrCsG,EAAOvG,SAASC,cAAc,SAC9BuG,EAAWD,EAAK9F,iBAAiB,cACjCgG,EAAoBzG,SAASS,iBAAiB,qBAC9CiG,EAAS1G,SAASC,cAAc,UACtC,IAAI0G,EAMJ,SAASC,EAAoBC,GAMzB,GALAA,EAAMC,cAAcC,MAAMC,QAAQ,MAClCH,EAAMI,aAAaC,QAAQ,aAAa,GAAGL,EAAMC,cAAcK,MAAMN,EAAMC,cAAcM,QAAQ9F,QAAQuF,EAAMC,cAAcM,QAAQlE,QACrI2D,EAAMI,aAAaI,cAAe,OAG/BR,EAAMC,cAAc5G,cAAcC,UAAUmH,SAAS,4BAA4B,CAEhF,MAAMC,EAAmBZ,EAAMxD,mBAAmB,SAAS0D,EAAMC,cAAcM,QAAQlE,MAEvFyD,EAAMvD,sBAAsB,SAASyD,EAAMC,cAAcM,QAAQlE,MAEjEqE,EAAiBpI,SAAQQ,IAErB6H,EADgBxH,SAASC,cAAc,YAAYN,EAAM,gBAAgBA,EAAM,QAC7C,IAAG,EAAM,GAEnD,CACJ,CAEA,SAAS8H,EAAeZ,GACpBA,EAAMa,kBACNb,EAAMc,iBAIN,MAAMR,EAAG7F,EAAK4B,GAAQ2D,EAAMI,aAAaW,QAAQ,cAAcpH,MAAM,KAC/DqH,EAAa7H,SAAS8H,eAAeX,IACpC7H,EAAEC,GAAK,CAACwI,SAASlB,EAAMC,cAAcM,QAAQ9H,GAAGyI,SAASlB,EAAMC,cAAcM,QAAQ7H,IAS5F,GARAsH,EAAMC,cAAcC,MAAMC,QAAQ,IAClCH,EAAMC,cAAc3G,UAAUC,OAAO,YAIjBuG,EAAMqB,iBAAiB,SAAS9E,EAAK5B,EAAK,CAAChC,EAAEC,IAHhD,GAMF,CAEX,MAAMgI,EAAmBZ,EAAMxD,mBAAmB,SAASD,GAG3D2E,EAAWd,MAAMC,QAAQ,IACzBH,EAAMC,cAAcmB,YAAYJ,GAEhCN,EAAiBpI,SAAQQ,IAErB6H,EADgBxH,SAASC,cAAc,YAAYN,EAAM,gBAAgBA,EAAM,QAC7CuD,GAAK,EAAK,IAG7CyD,EAAMuB,gBACLC,IAEH9B,EAAUlG,UAAUmH,SAAS,aAAgBjB,EAAUlG,UAAUC,OAAO,WAC7E,CACJ,CAEA,SAASgI,EAAoBvB,GAEzBA,EAAMc,iBACNd,EAAMI,aAAaoB,WAAW,MAE3BxB,EAAMC,cAAcM,QAAQlE,MAAQ2D,EAAMC,cAAcM,QAAQlE,KAAKzE,OAAO,IAE/EoI,EAAMC,cAAcC,MAAMC,QAAQ,MAClCH,EAAMC,cAAc3G,UAAUG,IAAI,YACtC,CAEA,SAASgI,EAAkBzB,GAE4B,SAAhDA,EAAMC,cAAcyB,aAAa,eAChC1B,EAAMC,cAAcC,MAAMC,QAAQ,IAC1C,CAEA,SAASwB,EAAmB3B,GAKxB,OAJAA,EAAMc,iBAGNd,EAAMI,aAAaoB,WAAW,OACvB,CACX,CAEA,SAASI,EAAoB5B,GAGzBA,EAAMC,cAAcC,MAAMC,QAAQ,IAClCH,EAAMC,cAAc3G,UAAUC,OAAO,WACzC,CAEA,SAASsI,EAAgB7B,GAErB,GAAsB,gBAAnBF,EAAMgC,YACL,GAAG9B,EAAMC,cAAc5G,cAAcC,UAAUmH,SAAS,4BAA4B,CAChF,MAAMhG,EAA4C,MAArCuF,EAAMC,cAAcM,QAAQ9F,KAAa,IAAI,IACpD4B,EAAO2D,EAAMC,cAAcM,QAAQlE,MAClC5D,EAAEC,GAAK,CAACwI,SAASlB,EAAMC,cAAc5G,cAAckH,QAAQ9H,GAAGyI,SAASlB,EAAMC,cAAc5G,cAAckH,QAAQ7H,IAClHqJ,GAAW,EAEXC,EAAsBlC,EAAMxD,mBAAmB,SAASD,GAK9D,GAFoByD,EAAMqB,iBAAiB,SAAS9E,EAAK5B,EAAK,CAAChC,EAAEC,GAAGqJ,GAErD,CACX/B,EAAMC,cAAcM,QAAQ9F,KAAMA,EAElC,MAAMwH,EAAkBnC,EAAMxD,mBAAmB,SAASD,GAE1D,IAAI,IAAIrB,EAAE,EAAEA,EAAEiH,EAAgBrK,OAAOoD,IAEjC2F,EADoBxH,SAASC,cAAc,YAAY6I,EAAgBjH,GAAG,gBAAgBiH,EAAgBjH,GAAG,QACvEqB,GAAK,GAE3CsE,EADoBxH,SAASC,cAAc,YAAY4I,EAAoBhH,GAAG,gBAAgBgH,EAAoBhH,GAAG,QAC/E,IAAG,EAEjD,MACIgF,EAAMC,cAAc3G,UAAUG,IAAI,SAClCyI,YAAYC,IACRA,EAAK7I,UAAUC,OAAO,QAAQ,GAC/B,IAAKyG,EAAMC,cAEtB,OAEAmC,EAAEnC,cAAc3G,UAAUG,IAAI,SAC9ByI,YAAYC,IACRA,EAAK7I,UAAUC,OAAO,QAAQ,GAC/B,IAAK6I,EAAEnC,cAGlB,CAEA,SAASU,EAA0BzH,EAAKmD,EAAK5C,GACtCA,GACCP,EAAKqH,QAAQlE,KAAKA,EAClBnD,EAAKG,cAAcC,UAAUC,OAAO,2BACpCL,EAAKG,cAAcC,UAAUG,IAAI,4BAEjCP,EAAKqH,QAAQlE,KAAK,GAClBnD,EAAKG,cAAcC,UAAUC,OAAO,0BACpCL,EAAKG,cAAcC,UAAUG,IAAI,2BAEzC,CAEA,SAAS6H,IACL5B,EAAKpG,UAAUG,IAAI,QACnB2F,EAAe9F,UAAUC,OAAO,QAChCkG,EAAYnG,UAAUC,OAAO,QAC7B8I,EAAc,2CAClB,CAEO,SAASA,EAAcC,GAC1BrD,EAAQsD,UAAYD,CACxB,CAEA,SAASE,IACcrJ,SAASS,iBAAiB,2BAClCtB,SAAQY,IACFA,EAAKE,cAAc,6BAC3BmH,QAAQlE,KAAK,GAClBnD,EAAKI,UAAUC,OAAO,0BACtBL,EAAKI,UAAUG,IAAI,0BAA0B,GAErD,CAEO,SAASgJ,IACZ3C,EAAMtD,WAAW,UAEjB,MAAMkG,EAAiBC,MAAMC,KAAKjD,GAEZxG,SAASS,iBAAiB,uCAElCtB,SAAQ+D,IACfA,EAAKhD,cAAcwJ,YAAYxG,GAC/BA,EAAKkE,QAAQ9F,KAAK,IACHiI,EAAeI,MAAKC,GAE3BA,EAASzJ,UAAUmH,SAASpE,EAAKkE,QAAQlE,QAE1C+E,YAAY/E,EAAK,IAI/BmG,IACA9C,EAAKpG,UAAUmH,SAAS,SAAUf,EAAKpG,UAAUC,OAAO,SACvD6F,EAAe9F,UAAUmH,SAAS,SAAWrB,EAAe9F,UAAUG,IAAI,SAC1EgG,EAAYnG,UAAUmH,SAAS,SAAWhB,EAAYnG,UAAUG,IAAI,SACnE+F,EAAUlG,UAAUmH,SAAS,aAAgBjB,EAAUlG,UAAUG,IAAI,YACvE4I,EAAc,mBAClB,CA8CA,SAASW,EAAaZ,GAClB,GAAsB,YAAnBtC,EAAMgC,YAA4C,WAAlBhC,EAAMmD,UAAqB,CAC1D,MAAMtI,EAAS,CAACuG,SAASkB,EAAEnC,cAAcM,QAAQ9H,GAAGyI,SAASkB,EAAEnC,cAAcM,QAAQ7H,IACrFoH,EAAMoD,SAASvI,EACnB,CACJ,CAEO,SAASwI,EAAgBpK,GAClB,WAAPA,GACEqG,EAAe9F,UAAUmH,SAAS,sBAAyBrB,EAAe9F,UAAUC,OAAO,sBAC1F+F,EAAgBhG,UAAUmH,SAAS,sBAAyBnB,EAAgBhG,UAAUG,IAAI,wBAE1F2F,EAAe9F,UAAUmH,SAAS,sBAAwBrB,EAAe9F,UAAUG,IAAI,qBACxF6F,EAAgBhG,UAAUmH,SAAS,sBAAwBnB,EAAgBhG,UAAUC,OAAO,qBAErG,CA6CA8F,EAAkB/G,SAAQY,IACtBA,EAAKkK,iBAAiB,QAAQJ,EAAa,IAG/C9D,EAAM5G,SAAQM,IACVA,EAAKwK,iBAAiB,YAAYrD,GAClCnH,EAAKwK,iBAAiB,UAAW3B,GACjC7I,EAAKwK,iBAAiB,QAASvB,EAAgB,IAInD1C,EAAmB7G,SAAQY,IACvBA,EAAKkK,iBAAiB,YAAa7B,GACnCrI,EAAKkK,iBAAiB,WAAYzB,GAClCzI,EAAKkK,iBAAiB,YAAaxB,GACnC1I,EAAKkK,iBAAiB,OAAOxC,EAAe,IAIhDpB,EAAU4D,iBAAiB,QAAQX,GACnClD,EAAc6D,iBAAiB,SA5HxB,WACHtD,EAAMuD,mBAAmB,UACzBb,IAEArI,OAAOC,KAAKP,GAAYvB,SAAQ+D,IAE5B,MAAMiH,EAAcxD,EAAMxD,mBAAmB,SAASD,GAChD5B,EAAO6I,EAAY,GAAG,KAAMA,EAAYA,EAAY1L,OAAO,GAAG,GAAK,IAAI,IAEvE2L,EAAcpK,SAAS8H,eAAe5E,GAC5CkH,EAAYhD,QAAQ9F,KAAOA,EAC3B,MAAOhC,EAAEC,GAAI4K,EAAY,GACnBE,EAA0BrK,SAASC,cAAc,YAAYX,eAAeC,OAClF6K,EAAYlK,cAAcwJ,YAAYU,GACtCC,EAAwBpC,YAAYmC,GACpCD,EAAYhL,SAAQQ,IAChB,MAAM2K,EAAqBtK,SAASC,cAAc,YAAYN,EAAM,gBAAgBA,EAAM,QAC1F2K,EAAmBlD,QAAQlE,KAAKA,EAChCoH,EAAmBpK,cAAcC,UAAUC,OAAO,2BAClDkK,EAAmBpK,cAAcC,UAAUG,IAAI,yBAAyB,GAC1E,IAGL+F,EAAUlG,UAAUmH,SAAS,aAAgBjB,EAAUlG,UAAUC,OAAO,YACzE+H,GACJ,IAoGA7B,EAAY2D,iBAAiB,SAlGtB,WACHtD,EAAM4D,YAEN9D,EAAkBtH,SAAQqL,GAAOA,EAAKrK,UAAUC,OAAO,WACrDmG,EAAKpG,UAAUmH,SAAS,SAAYf,EAAKpG,UAAUG,IAAI,QACzD2F,EAAe9F,UAAUmH,SAAS,SAAWrB,EAAe9F,UAAUC,OAAO,QAC7EsG,EAAOvG,UAAUG,IAAI,QACrB0J,EAAgBrD,EAAMmD,UAQ1B,IAoFAjE,EAAoBoE,iBAAiB,SA/C9B,WACHtD,EAAM8D,YACNnB,IACuBtJ,SAASS,iBAAiB,4EAClCtB,SAAQY,IAClBA,EAAKI,UAAUmH,SAAS,2BAA8BvH,EAAKI,UAAUC,OAAO,0BAC5EL,EAAKI,UAAUmH,SAAS,0BAA6BvH,EAAKI,UAAUC,OAAO,yBAC3EL,EAAKI,UAAUmH,SAAS,2BAA8BvH,EAAKI,UAAUC,OAAO,yBAAyB,IAGrFJ,SAASS,iBAAiB,iBAClCtB,SAAQoB,IAChBA,EAAUJ,UAAUC,OAAO,eAAe,IAG/CyF,EAAoB1F,UAAUG,IAAI,QACjCsF,EAAuBzF,UAAUmH,SAAS,gCAAmC1B,EAAuBzF,UAAUC,OAAO,+BACrHwF,EAAuBzF,UAAUmH,SAAS,iCAAoC1B,EAAuBzF,UAAUC,OAAO,gCAEvHqG,EAAkBtH,SAAQqL,GAAOA,EAAKrK,UAAUG,IAAI,WAClD2F,EAAe9F,UAAUmH,SAAS,sBAAwBrB,EAAe9F,UAAUG,IAAI,qBACxF6F,EAAgBhG,UAAUmH,SAAS,sBAAwBnB,EAAgBhG,UAAUC,OAAO,qBAC7FsG,EAAOvG,UAAUC,OAAO,OAC5B,ICtTA,MAAMsK,ECGS,WACX,IAAIC,EAAW,GACXC,EAAK,GACL9E,EAAU,GACV+E,EAAc,KACdC,EAAgB,KAChBC,EAAS,KACTC,EAAW,KAIf,SAASC,IACLJ,EAAclK,EAAU,GAAG,UAC3BmK,EAAgBnK,EAAU,GAAG,YAC7BoK,EAASjG,EAAO,UAChBkG,EAAWlG,EAAO,YAClB6F,EAAW,cACX7E,EAAU,mBACVgF,EAAcxH,kBACd4F,EAAcpD,EAClB,CA4HA,OAvIAmF,IAuIO,CACHA,aACAR,UA5HJ,WACIE,EAAW,cACX7E,EAAU,mBACV+E,EAAYxH,aACZyH,EAAczH,aACdyH,EAAcxH,kBACd4F,EAAcpD,EAClB,EAsHIoC,aApHJ,WAGI,OAAO4C,EAAclG,oBAAsBiG,EAAYjG,kBAC3D,EAiHIoD,iBA/GJ,SAA0BpI,EAAKsD,EAAK5B,EAAK3B,EAAMiJ,GAE3C,OADsB,WAARhJ,EAAmBiL,EAAcC,GAClCzJ,UAAU6B,EAAK5B,EAAK3B,EAAMiJ,EAC3C,EA6GIsB,mBA3GJ,SAA4BtK,IACF,WAARA,EAAmBiL,EAAcC,GACzCxH,iBACV,EAyGIF,sBAvGJ,SAA+B2H,EAAO7H,IACT,WAAX6H,EAAsBF,EAAcC,GAC5C1H,sBAAsBF,EAChC,EAqGIC,mBAnGJ,SAA4BvD,EAAKsD,GAC7B,MAAiB,gBAAdyH,EACQE,EAAY1H,mBAAmBD,GAEnC0H,IAAShL,GACe,WAATgL,EAAoBC,EAAcC,GACnC3H,mBAAmBD,QAFpC,CAKR,EA2FIqH,UAzFJ,WACII,EAAW,UACXC,EAAO,SACP9E,EAAU,2BACVoD,EAAcpD,EAGlB,EAmFIzC,WAlCJ,SAAoBzD,IACO,WAATA,EAAoBiL,EAAcC,GAC1CzH,YACV,EAgCIsF,SA9BJ,WACI,OAAOgC,CACX,EA6BIb,QAnBJ,WACI,OAAOc,CACX,EAkBIb,SAtEJ,SAASA,EAASpK,GACd,MAAM8F,EAAiB,WAATmF,EAAmBE,EAAgBD,EAE3CnJ,EAAuB,WAATkJ,EAAmBjL,EAAQ,KAEzCgE,GAHsB,WAATiH,EAAmBG,EAASC,GAGrBxF,OAAO9D,EAAY+D,GAC7C,GAAc,SAAX9B,EACCmC,EAAmB,WAAT8E,EAAmB,cAAgB,uBAC5C,GAAc,QAAXjH,EACJmC,EAAmB,WAAT8E,EAAmB,WAAa,qBACzC,GAAGjH,EAAOtD,WAAW,QAAQ,CAC9B,MAAM6C,EAAOS,EAAOnD,MAAM,KAAK,GAC/BsF,EAAmB,WAAT8E,EAAmB,uBAAuB1H,IAAS,sBAAsBA,IACvF,CACAgG,EAAcpD,GAKXL,EAAMxC,mBACL6C,EAAmB,WAAT8E,EAAmB,sCAAwC,uBACrED,EAAW,WF+JhB,SAAkBC,GACrB/E,EAAoB1F,UAAUC,OAAO,QAC3B,WAAPwK,GACChF,EAAuBzF,UAAUG,IAAI,+BACrCuF,EAAoB9C,MAAQ,gBAG5B6C,EAAuBzF,UAAUG,IAAI,gCACrCuF,EAAoB9C,MAAQ,UAEpC,CExKYmI,CAASN,GACT1B,EAAcpD,IACE,SAAXnC,EACLoF,YAAW,KAtCf6B,EAAgB,WAATA,EAAoB,WAAY,SACvCZ,EAAgBY,GACJ,aAATA,GAEC9E,EAAQ,mBACRiD,YAAW,KAAKgB,EAAS,KAAS,GAAG,MAGrCjE,EAAQ,iBAEZoD,EAAcpD,KA4BkB,MACb,QAAVnC,GAAmBA,EAAOtD,WAAW,WAE1C0I,YAAW,KAAKG,GAA0B,WAAT0B,EAAoB,OAAS,cAAhC,SAAoD,GAAG,KAC7E,aAAPA,GAAsB7B,YAAW,KAAKgB,EAAS,KAAS,GAAG,KAEpE,EAyCJ,CDjKaoB,IDgBN,SAAiBT,GACpB/D,EAAQ+D,CACZ,CChBAU,CAAQV,E","sources":["webpack://Odin Battleship/./src/modules/ship-factory.js","webpack://Odin Battleship/./src/modules/ship-placement.js","webpack://Odin Battleship/./src/modules/board_ui.js","webpack://Odin Battleship/./src/modules/gameboard-factory.js","webpack://Odin Battleship/./src/modules/player-factory.js","webpack://Odin Battleship/./src/modules/game_ui.js","webpack://Odin Battleship/./src/index.js","webpack://Odin Battleship/./src/modules/game.js"],"sourcesContent":["export default function Ship({name='',length=0}={}){\n    let numHits = 0;\n    \n    return {\n        getName() {\n            return name;\n        },\n        hit(){\n            if(numHits<length){\n                numHits += 1;\n                //console.log(`${name} : length: ${length} , Numhits: `, numHits);\n            }        \n        },\n        isSunk(){\n            return numHits === length;\n        },\n        reset(){\n            numHits = 0;\n        }\n    };\n}\n//const ship = Ship({name:'Carrier',length:5});\n","import { ship_types } from \"./gameboard-factory\";\n\nexport default function place_ships(board_size){\n    const placements = {};\n    const possible_placements= {};\n    Object.keys(ship_types).forEach(key=>{\n        placements[key]=[];\n        possible_placements[key] = calculate_possible_placement(board_size,ship_types[key])\n    });\n\n\n    Object.keys(placements).forEach(ship=>{\n        const is_horizontal = Math.random() > 0.5 ? true:false;\n        const direction= is_horizontal ? 'x':'y';\n        const start = possible_placements[ship][direction][Math.floor(Math.random()*possible_placements[ship][direction].length)];\n\n        const result = calculate_placement(ship_types[ship],is_horizontal,start);\n \n        placements[ship] = result[0];\n        update_possible_placements(possible_placements,placements,result[0].concat(result[1]));\n        \n    });\n   \n    return placements;\n}\n\nfunction calculate_possible_placement(board_size,ship_length){\n    const result = {'x':[],'y':[]};\n    for(let i=0;i<=board_size-ship_length;i++){\n        for(let j=0;j<board_size;j++)\n            result.x.push([i,j])\n    }\n    for(let i=0;i<board_size;i++){\n        for(let j=0;j<=board_size-ship_length;j++)\n            result.y.push([i,j])\n    }\n    return result;\n}\n\nfunction calculate_placement(ship_length,is_horizontal,start_coord){\n    const occupied_coords = [];\n    const surrounding_coords = [];\n    let currX = start_coord[0];\n    let currY = start_coord[1];\n\n    if(is_horizontal){\n        if(currX-1 >=0){\n            surrounding_coords.push([currX-1,currY]);\n            (currY-1>=0)&& surrounding_coords.push([currX-1,currY-1]);\n            (currY+1<=9)&& surrounding_coords.push([currX-1,currY+1]);\n        }\n    }else{\n        if(currY-1 >=0){\n            surrounding_coords.push([currX,currY-1]);\n            (currX-1>=0)&& surrounding_coords.push([currX-1,currY-1]);\n            (currX+1<=9)&& surrounding_coords.push([currX+1,currY-1]);\n        }\n    }\n\n    for(let i=0;i<ship_length;i++){\n        occupied_coords.push([currX,currY]);\n        if(is_horizontal){\n            (currY-1>=0)&& surrounding_coords.push([currX,currY-1]);\n            (currY+1<=9)&& surrounding_coords.push([currX,currY+1]);\n            currX+=1;\n        }\n        else{\n            (currX-1>=0)&& surrounding_coords.push([currX-1,currY]);\n            (currX+1<=9)&& surrounding_coords.push([currX+1,currY]);\n            currY+=1;\n        }\n    }\n    if(is_horizontal){\n        if(currX<=9){\n            surrounding_coords.push([currX,currY]);\n            (currY-1>=0)&& surrounding_coords.push([currX,currY-1]);\n            (currY+1<=9)&& surrounding_coords.push([currX,currY+1]);\n        }\n    }else{\n        if(currY <=9){\n            surrounding_coords.push([currX,currY]);\n            (currX-1>=0)&& surrounding_coords.push([currX-1,currY]);\n            (currX+1<=9)&& surrounding_coords.push([currX+1,currY]);\n        }\n    }\n\n    return [occupied_coords,surrounding_coords];\n}\n\nfunction update_possible_placements(possible_placements,placements,occupied_spots){\n    \n    for(const ship in possible_placements){\n        if(placements[ship].length>0)\n            continue;\n        remove_possible_spots_for_ship(possible_placements[ship],ship_types[ship],occupied_spots);\n    }\n}\n\nfunction remove_possible_spots_for_ship(possible_placement_obj,ship_length,occupied_spots){\n    occupied_spots.forEach(spot=>{\n        //remove spots up to length places to left of current spot\n        for(let count = ship_length, [x,y]= spot; x >= 0 && count > 0; count--, x--){\n            possible_placement_obj.x = possible_placement_obj.x.filter(item=>!(item[0]===x && item[1]===y));\n        }\n      \n        //remove spots up to length places above currentspot\n        for(let count = ship_length, [x,y]= spot; y >= 0 && count > 0; count--, y--){\n            possible_placement_obj.y = possible_placement_obj.y.filter(item=>!(item[0]===x && item[1]===y));\n        }\n    });\n}\n\n","const board_cells = document.querySelectorAll('.battlefield__self .battlefield-cell-content');\n\nexport function update_cell(coord,type,status){\n    const parent_element_class = type === 'player'? '.battlefield__self':'.battlefield__rival';\n    const cell = document.querySelector(`${parent_element_class} [data-x=\"${coord[0]}\"][data-y=\"${coord[1]}\"]`).parentElement;\n    cell.classList.remove('battlefield-cell__empty');\n    if(status.startsWith('sunk')){\n        cell.classList.add('battlefield-cell__done','battlefield-cell__hit');\n        const stat_ship = status.split(',')[1];\n        //console.log(`board_ui.update_cell. statship query selector: \"${parent_element_class} .battlefield-stat .ship[data-ship='${stat_ship}']\"`);\n        const stat_ship_elem = document.querySelector(`${parent_element_class} .battlefield-stat .ship[data-ship='${stat_ship}']`);\n        stat_ship_elem.classList.add('ship__killed');\n    }\n        \n    else if(status==='hit'){\n        cell.classList.add('battlefield-cell__hit');\n    }else if(status === 'miss')\n        cell.classList.add('battlefield-cell__miss');\n}","import Ship from \"./ship-factory.js\";\nimport place_ships from \"./ship-placement.js\";\nimport {update_cell} from './board_ui.js';\n\n\nexport const ship_types = {\n    'carrier':5,\n    'battleship':4,\n    'destroyer':3,\n    'submarine':3,\n    'patrol':2\n}\n\nexport default function GameBoard(grid_size,playerType){\n\n    const shipCoordinates = {};\n    let occupiedSpots = {\n        'carrier':[],\n        'battleship':[],\n        'destroyer':[],\n        'submarine':[],\n        'patrol':[]\n    };\n\n    Object.keys(ship_types).forEach(key=>{\n        shipCoordinates[key]={\n            'shipObj':Ship({name:key,length:ship_types[key]}),\n            'coords':[]\n        };\n    });\n\n\n    let missedCoords = [];\n    let hitCoords = [];\n\n    function placeShip(type,axis,startingCoord=shipCoordinates[type].coords[0],rotate){\n \n        //console.log(`Gameboard[${playerType}], placeship ${type}, axis: ${axis}, starting: [${startingCoord[0]},${startingCoord[1]}]`);\n        const success = populateShipCoordinates(type,ship_types[type],axis,startingCoord,rotate);\n        //console.log(`Gameboard[${playerType}] PlaceShip: coordinate length of ${type}: `,shipCoordinates[type].coords.length );\n        return success;\n    }\n\n    function populateShipCoordinates(type,length,axis,startingCoord,rotate){\n       // console.log(`Gameboard[${playerType}], populateShipCoordinates ${type}, length: ${length} axis: ${axis}, starting: [${startingCoord[0]},${startingCoord[1]}]`);\n\n        let coordinates = [];\n        let surroundingCells = []; \n        //Remove any current occupied spots for the ship, but save them in case ship can't be placed in new coordinate.\n        const old_occupied_spots_for_ship = occupiedSpots[type];\n        occupiedSpots[type] = [];\n\n        if(axis === 'y'){\n            for(let i=0;i<length;i+=1 ){\n                //coordinates = coordinates.concat([[startingCoord[0],startingCoord[1]+i]])\n                coordinates.push([startingCoord[0],startingCoord[1]+i]);\n\n                //Populate surrounding cells.\n                if(i=== 0 && startingCoord[1]-1>=0 ){\n                    //put the cell directly above the first cell\n                    surroundingCells.push([startingCoord[0],startingCoord[1]-1]);\n                     //put the cell diagonally to the left of the first cell\n                    (startingCoord[0]-1>=0)&& surroundingCells.push([startingCoord[0]-1,startingCoord[1]-1]);\n                     //put the cell diagonally to the right of the first cell\n                    (startingCoord[0]+1<=9)&& surroundingCells.push([startingCoord[0]+1,startingCoord[1]-1]);\n                    \n                }else if(i===length-1 &&  startingCoord[1]+i+1<=9){\n                    //put the cell directly below the last cell\n                    surroundingCells.push([startingCoord[0],startingCoord[1]+i+1]);\n                     //put the cell diagonally to the left of the last cell\n                    (startingCoord[0]-1>=0)&& surroundingCells.push([startingCoord[0]-1,startingCoord[1]+i+1]);\n                     //put the cell diagonally to the right of the last cell\n                    (startingCoord[0]+1<=9)&& surroundingCells.push([startingCoord[0]+1,startingCoord[1]+i+1]);\n                }\n\n                //Put cells to the left and right of current cell\n                (startingCoord[0]-1>=0)&& surroundingCells.push([startingCoord[0]-1,startingCoord[1]+i]);\n                (startingCoord[0]+1<=9)&& surroundingCells.push([startingCoord[0]+1,startingCoord[1]+i]);\n            }\n        }else if(axis === 'x'){\n            for(let i=0;i<length;i+=1 ){\n                //coordinates = coordinates.concat([[startingCoord[0]+i,startingCoord[1]]])\n                coordinates.push([startingCoord[0]+i,startingCoord[1]]);\n\n                 //Populate surrounding cells.\n                 if(i=== 0 && startingCoord[0]-1>=0 ){\n                    //put the cell to the left the first cell\n                    surroundingCells.push([startingCoord[0]-1,startingCoord[1]]);\n                     //put the cell diagonally above the first cell\n                    (startingCoord[1]-1>=0)&& surroundingCells.push([startingCoord[0]-1,startingCoord[1]-1]);\n                     //put the cell diagonally below the first cell\n                    (startingCoord[1]+1<=9)&& surroundingCells.push([startingCoord[0]-1,startingCoord[1]+1]);\n                    \n                }else if(i===length-1 &&  startingCoord[0]+i+1<=9){\n                    //put the cell to the right of the last cell\n                    surroundingCells.push([startingCoord[0]+i+1,startingCoord[1]]);\n                     //put the cell diagonally above the last cell\n                    (startingCoord[1]-1>=0)&& surroundingCells.push([startingCoord[0]+i+1,startingCoord[1]-1]);\n                     //put the cell diagonally below the last cell\n                    (startingCoord[1]+1<=9)&& surroundingCells.push([startingCoord[0]+i+1,startingCoord[1]+1]);\n                }\n\n                //Put cells above and below the current cell\n                (startingCoord[1]-1>=0)&& surroundingCells.push([startingCoord[0]+i,startingCoord[1]-1]);\n                (startingCoord[1]+1<=9)&& surroundingCells.push([startingCoord[0]+i,startingCoord[1]+1]);\n            } \n        }\n        // console.log(`Gameboard[${playerType}]: Coordinates to check: `, coordinates);\n        // console.log(`Gameboard[${playerType}]: surrounding cells: `, surroundingCells);\n        const can_place_ship = rotate? canPlaceShip(coordinates.slice(1)): canPlaceShip(coordinates);\n    \n\n        //console.log(`Gameboard[${playerType}]: CanPlaceShip returned: `,can_place_ship );\n        if(can_place_ship){\n            shipCoordinates[type].coords = coordinates;\n            occupiedSpots[type] = occupiedSpots[type].concat(coordinates,surroundingCells);\n            return true;\n        }\n        //Ship can't be placed in new coordinate. Restore any old occupied spots for ship.\n        occupiedSpots[type] = old_occupied_spots_for_ship;\n        return false;\n    }\n\n    function canPlaceShip(coordinates){\n        //console.log(`Gameboard: Coordinates to check: `, coordinates);\n        const occupied_spots = Object.values(occupiedSpots).reduce((prev,cur)=>prev.concat(cur),[]);\n        //console.log(`Gameboard, canPlaceShip, occupiedSpots`, occupied_spots);\n        return coordinates.every(spot=>{\n            //console.log(`Gameboard, canPlaceShip, spot: `, spot);\n            return !occupied_spots.some(occSpot=> {\n                //console.log(`Gameboard, canPlaceShip, occupied spot: `, occSpot);\n                return (occSpot[0]===spot[0]&& occSpot[1]===spot[1])\n            }) && \n            spot[0]>=0 && spot[0]< grid_size &&\n            spot[1]>=0 && spot[1]< grid_size\n        }); \n    }\n\n    function receiveAttack(coord){\n\n        let hit_status = 'miss';\n        const auto_missed_coords = new Set();\n\n        if(hitCoords.some(entry => entry[0]===coord[0]&& entry[1]===coord[1])||\n            missedCoords.some(entry => entry[0]===coord[0]&& entry[1]===coord[1]))\n            return 'already_tried';\n\n        for(const value of Object.values(shipCoordinates)){\n           \n            if(value.coords.some(spot => {\n                return spot[0]===coord[0]&& spot[1]===coord[1];\n            })){\n                value.shipObj.hit();\n                hit_status='hit';\n                //console.log(`Board.receiveAttack: ${playerType}'s ${value.shipObj.getName()} was hit `);\n                hitCoords.push(coord);\n                //push coordinates diagonal to current spot to missedCoords\n                if(coord[0]-1 >= 0 ){\n                    (coord[1]-1 >= 0 && !(missedCoords.some(entry => entry[0]===coord[0]-1&& entry[1]===coord[1]-1)))&& auto_missed_coords.add([coord[0]-1,coord[1]-1]);\n                    (coord[1]+1 < grid_size && !(missedCoords.some(entry => entry[0]===coord[0]-1&& entry[1]===coord[1]+1))) && auto_missed_coords.add([coord[0]-1,coord[1]+1]);\n                }\n                if(coord[0]+1 < grid_size ){\n                    (coord[1]-1 >= 0 && !(missedCoords.some(entry => entry[0]===coord[0]+1&& entry[1]===coord[1]-1))) && auto_missed_coords.add([coord[0]+1,coord[1]-1]);\n                    (coord[1]+1 < grid_size && !(missedCoords.some(entry => entry[0]===coord[0]+1&& entry[1]===coord[1]+1))) && auto_missed_coords.add([coord[0]+1,coord[1]+1]);\n                }\n\n                if(value.shipObj.isSunk()){\n                    hit_status = `sunk,${value.shipObj.getName()}`;\n                  \n                    //put the cell left of starting coordinate of ship to missedCoords if it is not already marked missed. \n                    (value.coords[0][0]-1 >=0 && !(missedCoords.some(entry => entry[0]=== value.coords[0][0]-1 && entry[1]=== value.coords[0][1]))) && auto_missed_coords.add([value.coords[0][0]-1,value.coords[0][1]]);\n                    //put the cell above the starting coordinate of ship to missedCoords if it is not already there.\n                    (value.coords[0][1]-1 >=0 && !(missedCoords.some(entry => entry[0]=== value.coords[0][0] && entry[1]=== value.coords[0][1]-1))) && auto_missed_coords.add([value.coords[0][0],value.coords[0][1]-1]);\n                    //put the cell right of ending coordinate of ship to missedCoords if it is not already there. \n                    (value.coords[value.coords.length-1][0]+1 <grid_size && !(missedCoords.some(entry => entry[0]=== value.coords[value.coords.length-1][0]+1 && entry[1]=== value.coords[value.coords.length-1][1]))) && auto_missed_coords.add([value.coords[value.coords.length-1][0]+1,value.coords[value.coords.length-1][1]]);\n                    //put the cell below the ending coordinate of ship to missedCoords if it is not already there.\n                    (value.coords[value.coords.length-1][1]+1 <grid_size && !(missedCoords.some(entry => entry[0]=== value.coords[value.coords.length-1][0] && entry[1]=== value.coords[value.coords.length-1][1]+1))) && auto_missed_coords.add([value.coords[value.coords.length-1][0],value.coords[value.coords.length-1][1]+1]);\n\n                    value.coords.forEach(coord=>update_cell(coord,playerType,hit_status));\n                }\n                break;\n            }   \n        }\n\n        //console.log(`Board ${playerType}.receiveAttack: Auto missed coords: `, auto_missed_coords);\n        auto_missed_coords.forEach(coord=>{\n            update_cell(coord,playerType,\"miss\");\n            missedCoords.push(coord);\n        });\n\n        (hit_status === 'miss') && missedCoords.push(coord);\n        update_cell(coord,playerType,hit_status);\n        return hit_status;\n    }\n\n    function areAllShipsSunk(){\n        return Object.values(shipCoordinates).every(ship=>ship.shipObj.isSunk())\n    }\n\n    function getShipCoordinates(type){\n        //console.log(`Gameboard[${playerType}] getShipCoordinates: shipCoordinates: `, shipCoordinates);\n        if(type)\n            return shipCoordinates[type].coords;\n        else\n            return shipCoordinates;\n    }\n\n    function removeShipCoordinates(type){\n        //console.log(`Gameboard[${playerType}] removeShipCoordinates[${type}] called`);\n        shipCoordinates[type].coords=[];\n    }\n\n    function resetBoard(){\n        Object.values(shipCoordinates).forEach(ship=>{\n            ship.coords=[];\n            ship.shipObj.reset();\n        });\n        Object.keys(occupiedSpots).forEach(key=>{\n            occupiedSpots[key]=[];\n        });\n        hitCoords = [];\n        missedCoords = [];\n    }\n\n    function randomPlacement(){\n        Object.entries(place_ships(grid_size)).forEach(([key,value])=>{\n            //console.log(`Gameboard[${playerType}] randomPlacement: key - ${key}, value: `, value);\n            shipCoordinates[key].coords = value;        \n        });\n        //console.log(`Board.randomPlacement: ${playerType}'s ship coordinates are:`, shipCoordinates);\n    }\n\n    function isBoardPopulated(){\n           return Object.keys(ship_types).every(type=>{\n            //console.log(`Gameboard[${playerType}] isBoardPopulated, ${type} length : ${ship_types[type]}  and coordinate length: `,shipCoordinates[type].coords.length );\n            return shipCoordinates[type].coords.length === ship_types[type];\n        });\n    }\n\n    function getMissedCoords(){\n        return missedCoords;\n    }\n\n    return {\n        placeShip,\n        receiveAttack,\n        areAllShipsSunk,\n        getShipCoordinates,\n        removeShipCoordinates,\n        resetBoard,\n        randomPlacement,\n        isBoardPopulated,\n        getMissedCoords\n    }\n\n}\n","import {update_cell} from './board_ui.js';\n\nexport default function Player(type){\n    const attackedSpots = [];\n    const missedSpots = [];\n    const autoMissedSpots = [];\n    let lastHitCoordStart = null;\n    let lastHitCoordEnd = null;\n    let axis = null;\n    let spotsToTry = [];\n\n    function attack(coord=null,board){\n        \n        //If player clicked on a spot they have already clicked on before.\n        const already_tried_spots = attackedSpots.concat(missedSpots.concat(autoMissedSpots));\n        //(type === 'opponent') && console.log(`Player ${type} attack, already tried spots: `, already_tried_spots);\n        if(coord && coord.length> 0 && already_tried_spots.some(spot => spot[0]===coord[0]&& spot[1]===coord[1]))\n            return 'already_tried';\n\n        let coordToHit = coord ? coord : null;\n\n        if(type === 'opponent'){\n        \n            if(lastHitCoordStart !== null){\n                const spotsToTryCopy = [...spotsToTry];\n                //console.log(`Player ${type}, spotsToTry:`, spotsToTryCopy);\n                //coordToHit = spotsToTry.shift();\n                coordToHit = spotsToTry[Math.floor(Math.random()*(spotsToTry.length))];\n                spotsToTry = spotsToTry.filter(spot=>!(spot[0]=== coordToHit[0]&& spot[1]=== coordToHit[1]));\n                //console.log(`Player opponent spotsToTry after choosing [${coordToHit}]:`,[...spotsToTry]);\n            }\n            else{\n                coordToHit = [Math.floor(Math.random()*10),Math.floor(Math.random()*10)];\n                    while(already_tried_spots.some(spot=>spot[0]=== coordToHit[0]&&spot[1]=== coordToHit[1])){\n                            coordToHit = [Math.floor(Math.random()*10),Math.floor(Math.random()*10)];\n                    }\n            }\n            //console.log(`Player: oppponent attacking: lastHitCoordStart: [${lastHitCoordStart}], lastHitCoordEnd: [${lastHitCoordEnd}], spotsToTry: [${spotsToTry}], coordtoHit: [${coordToHit}]`)\n        }\n        //console.log(`Player.attack: player ${type}, attacking [${coordToHit}]`);\n\n        const result = board.receiveAttack(coordToHit);\n        //update_cell(coordToHit,type,result);\n        if(type==='opponent'){\n\n            if(result.startsWith('sunk')){\n                attackedSpots.push(coordToHit);\n                (axis === null) && (axis = lastHitCoordStart[0] === coordToHit[0] ? 'y' : 'x');\n\n                addDiagonalSpotsToAttackedList(coordToHit);\n                addEndSpotsToAttackedList(coordToHit,lastHitCoordStart,lastHitCoordEnd,axis);\n                \n                //console.log(`Player opponent attack. Opponent sunk ship. Set spotsToTry to null`);\n                //console.log('Opponent attacked. Opponent sunk ship. Attacked Spots: %0, Auto missed spots: %0', attackedSpots,autoMissedSpots);\n                spotsToTry = [];\n                lastHitCoordEnd = lastHitCoordStart = null;\n                axis = null; \n\n            } else if(result==='hit'){\n                attackedSpots.push(coordToHit);\n                // add spots diagonal to current coord to attackedSpots.\n                addDiagonalSpotsToAttackedList(coordToHit);\n\n                //if I have had a hit before but not followed by a sunk and my current result is also a hit\n                if(lastHitCoordStart !== null){\n                    //If I didn't know the axis of the hit ship\n                    //console.log(`Player opponent attack: hit [${lastHitCoordStart}] before and [${coordToHit}] to hit is a hit `);\n                    if(axis === null){\n                        axis = lastHitCoordStart[0] === coordToHit[0] ? 'y' : 'x';\n                        //console.log(`Player opponent attack: axis: ${axis}`);\n                        spotsToTry = axis === 'x' ?\n                                    spotsToTry = spotsToTry.filter(spot => spot[1]===coordToHit[1]) :\n                                    spotsToTry = spotsToTry.filter(spot => spot[0]===coordToHit[0]);\n                        //console.log(`Player opponent attack: Filtered spots to try based on axis: [${spotsToTry}]`);\n                    } \n                    if(axis === 'x'){\n                        //Add the spot to the left of the current spot if I hit to the left of previous start.\n                        if(coordToHit[0]<lastHitCoordStart[0]){\n                            //console.log(`Player opponent attack: [${coordToHit}] is to left of [${lastHitCoordStart}], so add the spot to left of [${coordToHit}] to spots to Try. `);\n                            lastHitCoordStart[0] = coordToHit[0];\n                            (lastHitCoordStart[0]-1 >=0 && !already_tried_spots.some(spot => spot[0]===lastHitCoordStart[0]-1 && spot[1]=== lastHitCoordStart[1])) && spotsToTry.push([lastHitCoordStart[0]-1,lastHitCoordStart[1]]);\n                            //console.log(`Player opponent attack: spotsToTry should contains [${lastHitCoordStart[0]-1},${lastHitCoordStart[1]}] if it's within range and not already tried: `, [...spotsToTry]);\n                        }\n                        //Add the spot to the right of the current spot if I hit to the right of previous end.\n                        else if(coordToHit[0]>lastHitCoordEnd[0]){\n                            //console.log(`Player opponent attack: [${coordToHit}] is to right of [${lastHitCoordEnd}], so add the spot to right of [${coordToHit}] to spots to Try. `);\n                            lastHitCoordEnd[0] = coordToHit[0];\n                            (lastHitCoordEnd[0]+1 <=9 && !already_tried_spots.some(spot => spot[0]===lastHitCoordEnd[0]+1 && spot[1]=== lastHitCoordEnd[1])) && spotsToTry.push([lastHitCoordEnd[0]+1,lastHitCoordEnd[1]]);     \n                            //console.log(`Player opponent attack: spotsToTry should contains [${lastHitCoordEnd[0]+1},${lastHitCoordEnd[1]}] if it's within range and not already tried: `, [...spotsToTry]);\n                        }\n                    }else if(axis === 'y'){\n                        //Add the spot to the top of the current spot if I hit the top of previous start.\n                        if(coordToHit[1]<lastHitCoordStart[1]){\n                            //console.log(`Player opponent attack: [${coordToHit}] is above [${lastHitCoordStart}], so add the spot above [${coordToHit}] to spots to Try. `);\n                            lastHitCoordStart[1] = coordToHit[1];\n                            (lastHitCoordStart[1]-1 >= 0 && !already_tried_spots.some(spot => spot[0]===lastHitCoordStart[0] && spot[1]=== lastHitCoordStart[1]-1)) && spotsToTry.push([lastHitCoordStart[0],lastHitCoordStart[1]-1]);\n                            //console.log(`Player opponent attack: spotsToTry should contains [${lastHitCoordStart[0]},${lastHitCoordStart[1]-1}] if it's within range and not already tried: `, [...spotsToTry]);\n                        }\n                        //Add the spot to the bottom of the current spot if I hit the below of previous end and if it's not already hit.\n                        else if(coordToHit[1]>lastHitCoordEnd[1]){\n                            //console.log(`Player opponent attack: [${coordToHit}] is below [${lastHitCoordEnd}], so add the spot below [${coordToHit}] to spots to Try. `);\n                            lastHitCoordEnd[1] = coordToHit[1];\n                            (lastHitCoordEnd[1]+1 <= 9 && !already_tried_spots.some(spot => spot[0]===lastHitCoordEnd[0] && spot[1]=== lastHitCoordEnd[1]+1)) && spotsToTry.push([lastHitCoordEnd[0],lastHitCoordEnd[1]+1]);\n                            //console.log(`Player opponent attack: spotsToTry should contains [${lastHitCoordEnd[0]},${lastHitCoordEnd[1]+1}] if it's within range and not already tried: `, [...spotsToTry]);\n                        }\n                    }\n\n                }else{\n                    lastHitCoordStart = [...coordToHit];\n                    lastHitCoordEnd = [...coordToHit];\n                    (lastHitCoordStart[0]-1 >= 0 && !already_tried_spots.some(spot => spot[0]===lastHitCoordStart[0]-1 && spot[1]=== lastHitCoordStart[1])) && spotsToTry.push([lastHitCoordStart[0]-1,lastHitCoordStart[1]]);\n                    (lastHitCoordStart[0]+1 <= 9 && !already_tried_spots.some(spot => spot[0]===lastHitCoordStart[0]+1 && spot[1]=== lastHitCoordStart[1])) && spotsToTry.push([lastHitCoordStart[0]+1,lastHitCoordStart[1]]);\n                    (lastHitCoordStart[1]-1 >= 0 && !already_tried_spots.some(spot => spot[0]===lastHitCoordStart[0] && spot[1]=== lastHitCoordStart[1]-1)) && spotsToTry.push([lastHitCoordStart[0],lastHitCoordStart[1]-1]);\n                    (lastHitCoordStart[1]+1 <= 9 && !already_tried_spots.some(spot => spot[0]===lastHitCoordStart[0] && spot[1]=== lastHitCoordStart[1]+1)) && spotsToTry.push([lastHitCoordStart[0],lastHitCoordStart[1]+1]);\n                    //console.log(`Player opponent attack: Opponent hit for the first time. Add all unhit spots surrounding [${coordToHit}] to spotsToTry. Spots to try: [${spotsToTry}]`)\n                    //if I have had a hit before and my current result is a miss.\n                    //If I have an established axis, then I have found the start or end. Don't add spot before start or after end.\n                    //Do nothing in either case.\n                }\n            }else\n                missedSpots.push(coordToHit);   \n        }       \n        //console.log(`Player ${type} attack: adding [${coordToHit}] to attacked Spots`)\n        //attackedSpots.push(coordToHit);\n        //console.log(`Player ${type} attack: Hit spots:`, attackedSpots);\n        return result;\n    }\n\n    function addDiagonalSpotsToAttackedList(coordToHit){\n        const already_tried_spots = attackedSpots.concat(missedSpots.concat(autoMissedSpots));\n        if(coordToHit[0]-1 >= 0 ){\n            (coordToHit[1]-1 >= 0 && !(already_tried_spots.some(entry => entry[0]===coordToHit[0]-1&& entry[1]===coordToHit[1]-1)))&& autoMissedSpots.push([coordToHit[0]-1,coordToHit[1]-1]);\n            (coordToHit[1]+1 <=9  && !(already_tried_spots.some(entry => entry[0]===coordToHit[0]-1&& entry[1]===coordToHit[1]+1))) && autoMissedSpots.push([coordToHit[0]-1,coordToHit[1]+1]);\n        }\n        if(coordToHit[0]+1 <= 9){\n            (coordToHit[1]-1 >= 0 && !(already_tried_spots.some(entry => entry[0]===coordToHit[0]+1 && entry[1]===coordToHit[1]-1))) && autoMissedSpots.push([coordToHit[0]+1,coordToHit[1]-1]);\n            (coordToHit[1]+1 <=9 && !(already_tried_spots.some(entry => entry[0]===coordToHit[0]+1&& entry[1]===coordToHit[1]+1))) && autoMissedSpots.push([coordToHit[0]+1,coordToHit[1]+1]);\n        }\n        //console.log(`Player ${type} addDiagonalSpotstoAttackedList for ${[coordToHit]}, autoMissedSpots: `, autoMissedSpots);\n    }\n\n    function addEndSpotsToAttackedList(coord,start,end,axis){\n         //put the cell left of starting coordinate of ship and to right of endCoordinate of ship to attackedSpots if it is not already marked attacked. \n         \n         const already_tried_spots = attackedSpots.concat(missedSpots.concat(autoMissedSpots));\n         if(axis === 'x'){\n            if(coord[0]<start[0]){\n                (coord[0]-1 >= 0 && !already_tried_spots.some(spot=> spot[0]=== coord[0]-1 && spot[1]=== coord[1]) ) && autoMissedSpots.push([coord[0]-1,coord[1]]);\n                (end[0]+1 >= 0 && !already_tried_spots.some(spot=> spot[0]=== end[0]+1 && spot[1]=== end[1])) && autoMissedSpots.push([end[0]+1,end[1]]);\n            }\n            else{\n                (start[0]-1 >= 0 && !already_tried_spots.some(spot=> spot[0]=== start[0]-1 && spot[1]=== start[1])) && autoMissedSpots.push([start[0]-1,start[1]]);\n                (coord[0]+1 <= 9 && !already_tried_spots.some(spot=> spot[0]=== coord[0]+1 && spot[1]=== coord[1])) && autoMissedSpots.push([coord[0]+1,coord[1]]);\n            }\n                \n         }else{\n            if(coord[1]<start[1]){\n                (coord[1]-1 >= 0 && !already_tried_spots.some(spot=> spot[0]=== coord[0] && spot[1]=== coord[1]-1)) && autoMissedSpots.push([coord[0],coord[1]-1]);\n                (end[1]+1 <= 9 && !already_tried_spots.some(spot=> spot[0]=== end[0] && spot[1]=== end[1]+1)) && autoMissedSpots.push([end[0],end[1]+1]);\n            }\n            else{\n                (start[1]-1 >= 0 && !already_tried_spots.some(spot=> spot[0]=== start[0] && spot[1]=== start[1]-1)) && autoMissedSpots.push([start[0],start[1]-1]);\n                (coord[1]+1 <= 9 && !already_tried_spots.some(spot=> spot[0]=== coord[0] && spot[1]=== coord[1]+1)) && autoMissedSpots.push([coord[0],coord[1]+1]);\n            }\n         }\n         //console.log(`Player ${type} addEndSpotsToAttackedList for coord ${[coord]} with start [${start}] and end [${end}], autoMissedSpots: `, autoMissedSpots);\n    }\n\n    return {\n        attack\n    }\n\n}","import { ship_types } from \"./gameboard-factory\";\n\nconst notification_container = document.querySelector('.notification');\nconst notification_submit = document.querySelector('.notification-submit');\nconst message = document.querySelector('.notification-message');\nconst ships = document.querySelectorAll('[draggable=\"true\"]');\nconst player_board_cells = document.querySelectorAll('.battlefield__self .battlefield-cell-content');\nconst rival_board_ui = document.querySelector('.battlefield__rival');\nconst rival_board_cells = rival_board_ui.querySelectorAll('.battlefield-cell-content');\nconst player_board_ui = document.querySelector('.battlefield__self');\nconst randomizeLink = document.querySelector('.placeships-variant.random');\nconst resetLink = document.querySelector('.placeships-variant.reset');\nconst play_button = document.querySelector('.battlefield-start-button');\nconst port = document.querySelector('.port');\nconst port_ships=port.querySelectorAll('.port-ship');\nconst battlefield_stats = document.querySelectorAll('.battlefield-stat');\nconst footer = document.querySelector('footer');\nlet _game;\n\nexport function setGame(game){\n    _game = game;\n}\n\nfunction handleShipDragStart(event){\n    event.currentTarget.style.opacity='0.4';\n    event.dataTransfer.setData('text/plain',`${event.currentTarget.id},${event.currentTarget.dataset.axis},${event.currentTarget.dataset.ship}`);\n    event.dataTransfer.effectAllowed= 'move';\n\n   // console.log('Drag Start: Parent element: ', event.currentTarget.parentElement);\n    if(event.currentTarget.parentElement.classList.contains('battlefield-cell-content')){\n        //console.log('Remove ship data from currently occupied cells');\n        const ship_coordinates = _game.getShipCoordinates('player',event.currentTarget.dataset.ship);\n        //player_board.removeShipCoordinates(e.currentTarget.dataset.ship);\n        _game.removeShipCoordinates('player',event.currentTarget.dataset.ship);\n\n        ship_coordinates.forEach(coord=>{\n            const element = document.querySelector(`[data-x=\"${coord[0]}\"][data-y=\"${coord[1]}\"]`);\n            addRemoveShipDataFromCell(element,'',false);\n        });\n    }\n}\n\nfunction handleShipDrop(event){\n    event.stopPropagation();\n    event.preventDefault();\n    //console.log('Dropping on ', event.currentTarget);\n    // console.log(`Drop: this element:`, box);\n    // console.log(`Drop event: Item's length and axis:`, e.dataTransfer.getData('text/plain'));\n    const[id,axis,ship] = event.dataTransfer.getData('text/plain').split(',');\n    const sourceNode = document.getElementById(id);\n    const [x,y] = [parseInt(event.currentTarget.dataset.x),parseInt(event.currentTarget.dataset.y)];\n    event.currentTarget.style.opacity='1';\n    event.currentTarget.classList.remove('dragging');\n    const rotating = false;\n\n    //const placed_ship = player_board.placeShip(type,ship,axis,[x,y],rotating);\n    const placed_ship = _game.placeShipOnBoard('player',ship,axis,[x,y],rotating);\n    //console.log('Placed ship: ', placed_ship);\n\n    if(placed_ship){\n        //const ship_coordinates = player_board.getShipCoordinates(ship);\n        const ship_coordinates = _game.getShipCoordinates('player',ship);\n        //console.log(`Ship Coordinates: `, ship_coordinates);\n        //console.log(`handleDrop: is player board populated? `, game.getBoard('player').isBoardPopulated());\n        sourceNode.style.opacity='1';\n        event.currentTarget.appendChild(sourceNode);\n\n        ship_coordinates.forEach(coord=>{\n            const element = document.querySelector(`[data-x=\"${coord[0]}\"][data-y=\"${coord[1]}\"]`);\n            addRemoveShipDataFromCell(element,ship,true);\n        });\n\n        if(_game.canStartGame()){\n            prepareForPlayStart();\n        }\n        (resetLink.classList.contains('inactive')) && resetLink.classList.remove('inactive');\n    }\n}\n\nfunction handleShipDragEnter(event){\n   \n    event.preventDefault();\n    event.dataTransfer.dropEffect='all';\n    //console.log(`Entered [${event.currentTarget.dataset.x},${event.currentTarget.dataset.y}]`);\n    if(event.currentTarget.dataset.ship && event.currentTarget.dataset.ship.length>0)\n        return;\n    event.currentTarget.style.opacity='0.4';\n    event.currentTarget.classList.add('dragging');\n}    \n\nfunction handleShipDragEnd(event) {\n    //console.log(`Drag End`)\n    if(event.currentTarget.getAttribute('draggable')==='true')\n        event.currentTarget.style.opacity='1';\n}\n\nfunction handleShipDragOver(event) {\n    event.preventDefault();\n    //console.log(`Drag Over: `, e.currentTarget);\n    //e.target.style.opacity='1';\n    event.dataTransfer.dropEffect='all';\n    return false;\n}\n\nfunction handleShipDragLeave(event){\n    //console.log(`Drag Left: `, e.currentTarget);\n    //console.log(`Left [${event.currentTarget.dataset.x},${event.currentTarget.dataset.y}]`);\n    event.currentTarget.style.opacity='1';\n    event.currentTarget.classList.remove('dragging');\n}\n\nfunction handleShipClick(event){\n    //console.log(`HandleClick, game state: `, _game.getState());\n    if(_game.getState()==='place-ships'){\n        if(event.currentTarget.parentElement.classList.contains('battlefield-cell-content')){\n            const axis = event.currentTarget.dataset.axis === 'x'?'y':'x';\n            const ship = event.currentTarget.dataset.ship;\n            const [x,y] = [parseInt(event.currentTarget.parentElement.dataset.x),parseInt(event.currentTarget.parentElement.dataset.y)];\n            const rotating = true;\n\n            const current_coordinates = _game.getShipCoordinates('player',ship);\n            //console.log(`RotateShip: current_coordinates: `, current_coordinates);\n        \n            const rotate_ship = _game.placeShipOnBoard('player',ship,axis,[x,y],rotating);\n    \n            if(rotate_ship){\n                event.currentTarget.dataset.axis= axis;\n                //const new_coordinates = player_board.getShipCoordinates(ship);\n                const new_coordinates = _game.getShipCoordinates('player',ship);\n                //console.log(`RotateShip: new_coordinates: `, new_coordinates);\n                for(let i=1;i<new_coordinates.length;i++){\n                    const new_element = document.querySelector(`[data-x=\"${new_coordinates[i][0]}\"][data-y=\"${new_coordinates[i][1]}\"]`);\n                    addRemoveShipDataFromCell(new_element,ship,true);\n                    const old_element = document.querySelector(`[data-x=\"${current_coordinates[i][0]}\"][data-y=\"${current_coordinates[i][1]}\"]`);\n                    addRemoveShipDataFromCell(old_element,'',false);\n                };\n            }else {\n                event.currentTarget.classList.add('error');\n                setTimeout((node) => {\n                    node.classList.remove('error');\n                }, 1000,event.currentTarget);\n            }\n        }\n    }else {\n        e.currentTarget.classList.add('error');\n        setTimeout((node) => {\n            node.classList.remove('error');\n        }, 1000,e.currentTarget);\n    }\n\n}\n\nfunction addRemoveShipDataFromCell(cell,ship,add){\n    if(add){\n        cell.dataset.ship=ship;\n        cell.parentElement.classList.remove('battlefield-cell__empty');\n        cell.parentElement.classList.add('battlefield-cell__busy');\n    }else{\n        cell.dataset.ship='';\n        cell.parentElement.classList.remove('battlefield-cell__busy');\n        cell.parentElement.classList.add('battlefield-cell__empty');\n    }\n}\n\nfunction prepareForPlayStart(){\n    port.classList.add('none');\n    rival_board_ui.classList.remove('none');\n    play_button.classList.remove('none');\n    updateMessage('Press the Play button to start the game.');\n}\n\nexport function updateMessage(msg){\n    message.innerText = msg;\n}\n\nfunction resetPlayerBusyCells(){\n    const busy_cells = document.querySelectorAll('.battlefield-cell__busy');\n    busy_cells.forEach(cell=>{\n        const node = cell.querySelector('.battlefield-cell-content');\n        node.dataset.ship='';\n        cell.classList.remove('battlefield-cell__busy');\n        cell.classList.add('battlefield-cell__empty');\n    });\n}\n\nexport function resetPlayerShips(){\n    _game.resetBoard('player');\n\n    const port_ships_arr = Array.from(port_ships);\n    //console.log(`Port ship array: `, port_ships_arr);\n    const ships_in_grid = document.querySelectorAll('.battlefield-cell-content .ship-box');\n    //console.log(`Ships in grid: `, ships_in_grid);\n    ships_in_grid.forEach(ship=>{\n           ship.parentElement.removeChild(ship);\n           ship.dataset.axis='x';\n        const port_ship = port_ships_arr.find(portShip=>{\n            //console.log(`Ship classlist: `, portShip.classList);\n            return portShip.classList.contains(ship.dataset.ship)\n        });\n        port_ship.appendChild(ship);\n\n    });\n\n    resetPlayerBusyCells();\n    port.classList.contains('none')&& port.classList.remove('none');\n    !rival_board_ui.classList.contains('none') && rival_board_ui.classList.add('none');\n    !play_button.classList.contains('none') && play_button.classList.add('none');\n    !(resetLink.classList.contains('inactive')) && resetLink.classList.add('inactive');\n    updateMessage('Place the ships.');\n}\n\nexport function placePlayerShipsRandomly(){\n    _game.placeShipsRandomly('player');\n    resetPlayerBusyCells();\n\n    Object.keys(ship_types).forEach(ship=>{\n        //const ship_coords = player_board.getShipCoordinates(ship);\n        const ship_coords = _game.getShipCoordinates('player',ship);\n        const axis = ship_coords[0][0]=== ship_coords[ship_coords.length-1][0] ? 'y':'x';\n        //console.log(`placeShipsRandomly: axis for ${ship} is ${axis}`);\n        const shipElement = document.getElementById(ship);\n        shipElement.dataset.axis = axis;\n        const [x,y]= ship_coords[0];\n        const grid_cell_to_place_ship = document.querySelector(`[data-x=\"${x}\"][data-y=\"${y}\"]`);\n        shipElement.parentElement.removeChild(shipElement);\n        grid_cell_to_place_ship.appendChild(shipElement); \n        ship_coords.forEach(coord=>{\n            const occupied_grid_cell = document.querySelector(`[data-x=\"${coord[0]}\"][data-y=\"${coord[1]}\"]`);\n            occupied_grid_cell.dataset.ship=ship;\n            occupied_grid_cell.parentElement.classList.remove('battlefield-cell__empty');\n            occupied_grid_cell.parentElement.classList.add('battlefield-cell__busy');\n        });  \n    });\n\n    (resetLink.classList.contains('inactive')) && resetLink.classList.remove('inactive');\n    prepareForPlayStart();\n}\n\nexport function startPlay(){\n    _game.startGame();\n\n    battlefield_stats.forEach(stat=> stat.classList.remove('none'));\n    !(port.classList.contains('none')) && port.classList.add('none');\n    rival_board_ui.classList.contains('none') && rival_board_ui.classList.remove('none');\n    footer.classList.add('none');\n    toggleBoardWait(_game.getTurn());\n    // if(_game.getTurn() === 'player'){\n    //     (rival_board_ui.classList.contains('battlefield__wait')) && rival_board_ui.classList.remove('battlefield__wait');\n    //     !(player_board_ui.classList.contains('battlefield__wait')) && player_board_ui.classList.add('battlefield__wait');\n    // }else{\n    //     !(rival_board_ui.classList.contains('battlefield__wait'))&& rival_board_ui.classList.add('battlefield__wait');\n    //     (player_board_ui.classList.contains('battlefield__wait'))&& player_board_ui.classList.remove('battlefield__wait');\n    // }\n}\n\nfunction handleAttack(e){\n    if(_game.getState()==='running' && _game.getTurn()==='player'){\n        const coords = [parseInt(e.currentTarget.dataset.x),parseInt(e.currentTarget.dataset.y)];\n        _game.playTurn(coords);\n    }\n}\n\nexport function toggleBoardWait(type){\n    if(type==='player'){\n        (rival_board_ui.classList.contains('battlefield__wait')) && rival_board_ui.classList.remove('battlefield__wait');\n        !(player_board_ui.classList.contains('battlefield__wait')) && player_board_ui.classList.add('battlefield__wait');\n    }else{\n        !(rival_board_ui.classList.contains('battlefield__wait'))&& rival_board_ui.classList.add('battlefield__wait');\n        (player_board_ui.classList.contains('battlefield__wait'))&& player_board_ui.classList.remove('battlefield__wait');\n    }\n}\n\nexport function gameOver(turn){\n    notification_submit.classList.remove('none');\n    if(turn==='player'){\n        notification_container.classList.add('notification__game-over-win');\n        notification_submit.value = 'Play again ';\n    }\n    else{\n        notification_container.classList.add('notification__game-over-lose');\n        notification_submit.value = 'Rematch';\n    }\n}\n\n// export function resetNotification(){\n//     notification_submit.classList.add('none');\n//     (notification_container.classList.contains('notification__game-over-win')) && notification_container.classList.remove('notification__game-over-win');\n//     (notification_container.classList.contains('notification__game-over-lose')) && notification_container.classList.remove('notification__game-over-lose');\n// }\n\nexport function resetUI(){\n    _game.resetGame();\n    resetPlayerShips();\n    const occupied_cells = document.querySelectorAll('.battlefield-cell__miss, .battlefield-cell__hit, .battlefield-cell__done');\n    occupied_cells.forEach(cell=>{\n        (cell.classList.contains('battlefield-cell__miss')) && cell.classList.remove('battlefield-cell__miss');\n        (cell.classList.contains('battlefield-cell__hit')) && cell.classList.remove('battlefield-cell__hit');\n        (cell.classList.contains('battlefield-cell__done')) && cell.classList.remove('battlefield-cell__done');\n    });\n\n    const killed_ships = document.querySelectorAll('.ship__killed');\n    killed_ships.forEach(stat_ship=>{\n         stat_ship.classList.remove('ship__killed');\n    });\n\n    notification_submit.classList.add('none');\n    (notification_container.classList.contains('notification__game-over-win')) && notification_container.classList.remove('notification__game-over-win');\n    (notification_container.classList.contains('notification__game-over-lose')) && notification_container.classList.remove('notification__game-over-lose');\n\n    battlefield_stats.forEach(stat=> stat.classList.add('none'));\n    !(rival_board_ui.classList.contains('battlefield__wait'))&& rival_board_ui.classList.add('battlefield__wait');\n    (player_board_ui.classList.contains('battlefield__wait'))&& player_board_ui.classList.remove('battlefield__wait');\n    footer.classList.remove('none');\n}\n\nrival_board_cells.forEach(cell=>{\n    cell.addEventListener('click',handleAttack);\n});\n\nships.forEach(item=>{\n    item.addEventListener('dragstart',handleShipDragStart);\n    item.addEventListener('dragend', handleShipDragEnd);\n    item.addEventListener('click', handleShipClick);\n});\n\n\nplayer_board_cells.forEach(cell=>{\n    cell.addEventListener('dragenter', handleShipDragEnter);\n    cell.addEventListener('dragover', handleShipDragOver);\n    cell.addEventListener('dragleave', handleShipDragLeave);\n    cell.addEventListener('drop',handleShipDrop);\n    \n});\n\nresetLink.addEventListener('click',resetPlayerShips);\nrandomizeLink.addEventListener('click',placePlayerShipsRandomly);\nplay_button.addEventListener('click',startPlay);\nnotification_submit.addEventListener('click',resetUI);","import Game from './modules/game.js';\nimport {setGame} from \"./modules/game_ui\";\n\nconst game = Game();\n\nsetGame(game);\n","import GameBoard from './gameboard-factory.js';\nimport Player from './player-factory.js';\nimport {update_cell} from './board_ui.js';\nimport {updateMessage,toggleBoardWait,gameOver} from './game_ui';\nimport './game_ui';\n\nexport default function Game(){\n    let game_state='';\n    let turn='';\n    let message = '';\n    let playerBoard = null;\n    let opponentBoard = null;\n    let player = null;\n    let opponent = null;\n\n    initialize();\n\n    function initialize(){\n        playerBoard = GameBoard(10,'player');\n        opponentBoard = GameBoard(10,'opponent');\n        player = Player('player');\n        opponent = Player('opponent');\n        game_state='place-ships';\n        message = 'Place the ships.';\n        opponentBoard.randomPlacement();\n        updateMessage(message);\n    }\n\n    function resetGame(){\n        game_state='place-ships';\n        message = 'Place the ships.';\n        playerBoard.resetBoard();\n        opponentBoard.resetBoard();\n        opponentBoard.randomPlacement();\n        updateMessage(message);\n    }\n\n    function canStartGame(){\n        //  console.log(`can Start Game, is player board Populated?`, playerBoard.isBoardPopulated());\n        //  console.log(`can Start Game, is opponent board Populated?`, opponentBoard.isBoardPopulated());\n        return opponentBoard.isBoardPopulated() && playerBoard.isBoardPopulated();\n    }\n\n    function placeShipOnBoard(type,ship,axis,coord,rotating){\n        const board = type=== 'player' ? playerBoard : opponentBoard;\n        return board.placeShip(ship,axis,coord,rotating);\n    }\n\n    function placeShipsRandomly(type){\n        const board = type=== 'player' ? playerBoard : opponentBoard;\n        board.randomPlacement();\n    }\n\n    function removeShipCoordinates(player,ship){\n        const board = player === 'player' ? playerBoard : opponentBoard;\n        board.removeShipCoordinates(ship);\n    }\n\n    function getShipCoordinates(type,ship){\n        if(game_state ==='place-ships'){\n            return playerBoard.getShipCoordinates(ship);\n        }else{\n            if(turn === type){\n                const board = turn === 'player' ? playerBoard : opponentBoard;\n                return board.getShipCoordinates(ship);\n            }\n        }\n    }\n\n    function startGame(){\n        game_state='running';\n        turn = 'player';\n        message = 'Game started. Your turn.';\n        updateMessage(message);\n        // console.log(`Game.startGame. playerBoard coordinates: `, playerBoard.getShipCoordinates());\n        // console.log(`Game.startGame. opponentBoard coordinates: `, opponentBoard.getShipCoordinates());\n    }\n\n    function toggleTurn(){\n        turn = turn === 'player' ? 'opponent' :'player';\n        toggleBoardWait(turn);\n        if(turn === 'opponent'){\n            // hit player's board\n            message=`Opponent's turn.`;\n            setTimeout(()=>{playTurn(null,null)},3000);\n        }\n        else{\n            message=`Your turn`;\n        }\n        updateMessage(message);\n    }\n\n    function playTurn(coord){\n        const board = turn === 'player'? opponentBoard : playerBoard;\n        const playerType = turn === 'player'? player : opponent;\n        const coordinates = turn === 'player'? coord : null;\n        // console.log(`Game.playTurn: turn: ${turn}, attacking [${coordinates}]`);\n        const result = playerType.attack(coordinates,board);\n        if(result === 'miss')\n            message = turn === 'player'? 'You missed.' : 'Opponent missed';\n        else if(result === 'hit')\n            message = turn === 'player'? 'You hit.' : 'Opponent hit.';\n        else if(result.startsWith('sunk')){\n            const ship = result.split(',')[1];\n            message = turn === 'player'? `You sunk opponent's ${ship}` : `Opponent sunk your ${ship}.`;\n        }\n        updateMessage(message);\n        \n        // if(turn === 'player')   \n        //     update_cell(coordinates,turn,result);\n\n        if(board.areAllShipsSunk()){\n            message = turn === 'player'? `Game Over. Congratulations you won!` : `Game over. You lose.`;\n            game_state='finished';\n            gameOver(turn);\n            updateMessage(message);\n        }else if(result === 'miss'){\n            setTimeout(()=>toggleTurn(),1000);\n        }else if(result ==='hit' || result.startsWith('sunk')){\n            // setTimeout(()=>toggleTurn(),3000);\n            setTimeout(()=>{updateMessage(`${turn === 'player' ? 'Your' : \"Opponent's\"} turn.`)},2000);\n            (turn==='opponent') && setTimeout(()=>{playTurn(null,null)},4000);\n        }\n    }\n\n    function resetBoard(type){\n        const board = type === 'player' ? playerBoard : opponentBoard;\n        board.resetBoard();\n    }\n\n    function getState(){\n        return game_state;\n    }\n\n    // function getMessage(){\n    //     return message;\n    // }\n\n    // function getBoard(type){\n    //     return type==='player'? playerBoard : opponentBoard;\n    // }\n\n    function getTurn(){\n        return turn;\n    }\n\n    // function getPlayer(){\n    //     return player;\n    // }\n\n    return {\n        initialize,\n        resetGame,\n        canStartGame,\n        placeShipOnBoard,\n        placeShipsRandomly,\n        removeShipCoordinates,\n        getShipCoordinates,\n        startGame,\n        resetBoard,\n        getState,\n        getTurn,\n        playTurn,\n    }\n}"],"names":["Ship","name","length","numHits","getName","hit","isSunk","reset","remove_possible_spots_for_ship","possible_placement_obj","ship_length","occupied_spots","forEach","spot","count","x","y","filter","item","update_cell","coord","type","status","parent_element_class","cell","document","querySelector","parentElement","classList","remove","startsWith","add","stat_ship","split","querySelectorAll","ship_types","GameBoard","grid_size","playerType","shipCoordinates","occupiedSpots","Object","keys","key","missedCoords","hitCoords","placeShip","axis","startingCoord","coords","rotate","coordinates","surroundingCells","old_occupied_spots_for_ship","i","push","values","reduce","prev","cur","concat","every","some","occSpot","canPlaceShip","slice","populateShipCoordinates","receiveAttack","hit_status","auto_missed_coords","Set","entry","value","shipObj","areAllShipsSunk","ship","getShipCoordinates","removeShipCoordinates","resetBoard","randomPlacement","entries","board_size","placements","possible_placements","result","j","calculate_possible_placement","is_horizontal","Math","random","direction","start","floor","start_coord","occupied_coords","surrounding_coords","currX","currY","calculate_placement","update_possible_placements","place_ships","isBoardPopulated","getMissedCoords","Player","attackedSpots","missedSpots","autoMissedSpots","lastHitCoordStart","lastHitCoordEnd","spotsToTry","addDiagonalSpotsToAttackedList","coordToHit","already_tried_spots","attack","board","end","addEndSpotsToAttackedList","notification_container","notification_submit","message","ships","player_board_cells","rival_board_ui","rival_board_cells","player_board_ui","randomizeLink","resetLink","play_button","port","port_ships","battlefield_stats","footer","_game","handleShipDragStart","event","currentTarget","style","opacity","dataTransfer","setData","id","dataset","effectAllowed","contains","ship_coordinates","addRemoveShipDataFromCell","handleShipDrop","stopPropagation","preventDefault","getData","sourceNode","getElementById","parseInt","placeShipOnBoard","appendChild","canStartGame","prepareForPlayStart","handleShipDragEnter","dropEffect","handleShipDragEnd","getAttribute","handleShipDragOver","handleShipDragLeave","handleShipClick","getState","rotating","current_coordinates","new_coordinates","setTimeout","node","e","updateMessage","msg","innerText","resetPlayerBusyCells","resetPlayerShips","port_ships_arr","Array","from","removeChild","find","portShip","handleAttack","getTurn","playTurn","toggleBoardWait","addEventListener","placeShipsRandomly","ship_coords","shipElement","grid_cell_to_place_ship","occupied_grid_cell","startGame","stat","resetGame","game","game_state","turn","playerBoard","opponentBoard","player","opponent","initialize","gameOver","Game","setGame"],"sourceRoot":""}